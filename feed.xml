<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="https://thib.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thib.me/" rel="alternate" type="text/html" /><updated>2020-11-22T23:57:39+00:00</updated><id>https://thib.me/feed.xml</id><title type="html">Thibaud’s blog</title><subtitle>Logbook of a software engineer navigating web development</subtitle><author><name>Thibaud Colas</name></author><entry><title type="html">Testing accessibility in Continuous Integration with Pa11y and beyond</title><link href="https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond" rel="alternate" type="text/html" title="Testing accessibility in Continuous Integration with Pa11y and beyond" /><published>2020-08-13T21:21:08+00:00</published><updated>2020-08-13T21:21:08+00:00</updated><id>https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond</id><content type="html" xml:base="https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond">&lt;p&gt;Here are tools I recommend to test for accessibility issues in continuous integration, where automation is the only option, and reliability is paramount.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;the-requirements-of-ci&quot;&gt;The requirements of CI&lt;/h2&gt;

&lt;p&gt;It’s worth pointing out early – no accessibility testing tool can &lt;a href=&quot;https://alphagov.github.io/accessibility-tool-audit/&quot;&gt;find all issues&lt;/a&gt; . With this in mind, in CI, we need to focus on tools that find as much as possible… but don’t create false positives, which are very damaging when they fail your build. It’s more important for a tool to have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Precision_and_recall&quot;&gt;high precision, than a high recall&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h2&gt;

&lt;p&gt;This is always a valuable first line of defense.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Basic checks for stylesheets: &lt;a href=&quot;https://github.com/YozhikM/stylelint-a11y&quot;&gt;stylelint-a11y&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Relatively advanced checks for React code: &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;, &lt;a href=&quot;https://github.com/evcohen/eslint-plugin-jsx-a11y&quot;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And a Vue equivalent: &lt;a href=&quot;https://github.com/maranran/eslint-plugin-vue-a11y&quot;&gt;eslint-plugin-vue-a11y&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For HTML templates, you can try my own experimental HTML templates linter, &lt;a href=&quot;https://github.com/thibaudcolas/curlylint&quot;&gt;Curlylint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility-tests-in-unit-and-integration-tests&quot;&gt;Accessibility tests in unit and integration tests&lt;/h2&gt;

&lt;p&gt;Here are the options, from simplest to most complex:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nickcolley/jest-axe&quot;&gt;jest-axe&lt;/a&gt; in jsdom for React projects. It’s very lightweight to set up, and gives surprisingly good results.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nickcolley/jest-axe&quot;&gt;jest-axe&lt;/a&gt; in Puppeteer. It’s not lightweight to set up, far from it, but does a bit more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pa11y.org/&quot;&gt;Pa11y&lt;/a&gt;, or &lt;a href=&quot;https://github.com/pa11y/pa11y-ci&quot;&gt;pa11y-ci&lt;/a&gt;. Not lightweight either, but simple to configure.&lt;/li&gt;
  &lt;li&gt;Google’s Lighthouse also has a &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse-ci&quot;&gt;Lighthouse CI&lt;/a&gt; variant which may be useful when also wanting to have performance and best practice checks.&lt;/li&gt;
  &lt;li&gt;An alternative could also be to run HTML validation with &lt;a href=&quot;https://validator.github.io/validator/&quot;&gt;V.Nu HTML5 validator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-to-test&quot;&gt;What to test&lt;/h2&gt;

&lt;p&gt;It’s not always easy to have test content to run the checks against of in CI. My personal preference is to run the tests against a pattern library’s components, for example &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt; or &lt;a href=&quot;https://github.com/torchbox/django-pattern-library&quot;&gt;django-pattern-library&lt;/a&gt;. As part of creating the components, we naturally create test data for them similarly to unit tests (TDD or not) – this test content can then be used to test the components’ variations for accessibility issues.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Here are tools I recommend to test for accessibility issues in continuous integration, where automation is the only option, and reliability is paramount.</summary></entry><entry><title type="html">Curlylint: Accessibility linting rules</title><link href="https://thib.me/curlylint-accessibility-linting-rules" rel="alternate" type="text/html" title="Curlylint: Accessibility linting rules" /><published>2020-07-26T02:22:49+00:00</published><updated>2020-07-26T02:22:49+00:00</updated><id>https://thib.me/curlylint-accessibility-linting-rules</id><content type="html" xml:base="https://thib.me/curlylint-accessibility-linting-rules">&lt;p&gt;Curlylint now comes with 7 accessibility-related rules, ready to use in HTML templates. See &lt;a href=&quot;https://www.curlylint.org/docs/rules/all&quot;&gt;All rules&lt;/a&gt; for details about the individual rules.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;This is an important milestone for the linter – essentially demonstrating its usefulness once and for all, if that was still needed.&lt;/p&gt;

&lt;h2 id=&quot;html-best-practices&quot;&gt;HTML best practices&lt;/h2&gt;

&lt;p&gt;Most of the rules Curlylint currently ships with are very simple “HTML linting” rules for accessibility, based on established best practice:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.curlylint.org/docs/rules/aria_role&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria_role&lt;/code&gt;&lt;/a&gt; just checks that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;role&lt;/code&gt; attributes are valid.&lt;/li&gt;
  &lt;li&gt;Same for &lt;a href=&quot;https://www.curlylint.org/docs/rules/html_has_lang&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html_has_lang&lt;/code&gt;&lt;/a&gt;, for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lang&lt;/code&gt; attribute.&lt;/li&gt;
  &lt;li&gt;Same for &lt;a href=&quot;https://www.curlylint.org/docs/rules/image_alt&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image_alt&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.curlylint.org/docs/rules/meta_viewport&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta_viewport&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.curlylint.org/docs/rules/no_autofocus&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no_autofocus&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.curlylint.org/docs/rules/tabindex_no_positive&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tabindex_no_positive&lt;/code&gt;&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See a pattern? All of these are variations on the same theme of “HTML attributes should only contain a limited range of values based on established best practices”. This is great news for this project – it means there can be quite a lot of results achieved with minimal complexity when it comes to creating individual rules.&lt;/p&gt;

&lt;p&gt;In the future, this could easily be taken further to cover:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Security best practices, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rel=&quot;noopener&quot;&lt;/code&gt;, or disallowing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;javascript:&lt;/code&gt; URLs in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;href&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;HTML maintainability best practices, for example disallowing duplicate class attributes.&lt;/li&gt;
  &lt;li&gt;And of course, more accessibility and ARIA best practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Obligatory mention of &lt;a href=&quot;https://github.com/jsx-eslint/eslint-plugin-jsx-a11y&quot;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;, which has been a huge source of inspiration. Generally, modern React tooling has this figured out, with extensive static analysis available. For me, this isn’t just a nice-to-have – it’s hard to always keel all of those best practices in mind, and linting is there to automate this for you. Note this isn’t just React – Vue has its &lt;a href=&quot;https://github.com/maranran/eslint-plugin-vue-a11y&quot;&gt;eslint-plugin-vue-a11y&lt;/a&gt; too!&lt;/p&gt;

&lt;h2 id=&quot;templates-best-practices&quot;&gt;Templates best practices&lt;/h2&gt;

&lt;p&gt;This doesn’t have to stop at HTML. Curlylint already supports parsing template syntax, attempting to be usable as a linter for Jinja, Twig, Liquid, &lt;a href=&quot;https://www.curlylint.org/docs/template-languages&quot;&gt;and the likes&lt;/a&gt;. We can also have rules to enforce best practices for this template syntax.&lt;/p&gt;

&lt;p&gt;The first example of such a rule is &lt;a href=&quot;https://www.curlylint.org/docs/rules/django_forms_rendering&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;django_forms_rendering&lt;/code&gt;&lt;/a&gt;, which restricts how forms can be rendered in Django projects, for accessibility reasons. I’m very excited about opportunities like this to codify and share best practices in a way that scales well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hopefully there will be more &lt;a href=&quot;https://github.com/django/deps/pull/69&quot;&gt;linting rules for Django&lt;/a&gt; coming in the future.&lt;/li&gt;
  &lt;li&gt;And more linting rules &lt;a href=&quot;https://github.com/wagtail/wagtail/issues/6090&quot;&gt;for Wagtail&lt;/a&gt; as well.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Curlylint now comes with 7 accessibility-related rules, ready to use in HTML templates. See All rules for details about the individual rules.</summary></entry><entry><title type="html">Curlylint: Brand new rules documentation</title><link href="https://thib.me/curlylint-brand-new-rules-documentation" rel="alternate" type="text/html" title="Curlylint: Brand new rules documentation" /><published>2020-07-18T22:05:21+00:00</published><updated>2020-07-18T22:05:21+00:00</updated><id>https://thib.me/curlylint-brand-new-rules-documentation</id><content type="html" xml:base="https://thib.me/curlylint-brand-new-rules-documentation">&lt;p&gt;Have I mentioned &lt;a href=&quot;/welcome-to-curlylint&quot;&gt;how important I think it is for a linter to have great docs&lt;/a&gt;? Well, now is the time for Curlylint to live up to this!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;new-documentation-format-for-rules&quot;&gt;New documentation format for rules&lt;/h2&gt;

&lt;p&gt;Up until now the rules’ documentation was pretty sad, essentially limited to what could fit in the project’s README. Now… take a look:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.curlylint.org/docs/rules/image_alt&quot;&gt;&lt;img src=&quot;/images/blog/curlylint-brand-new-rules-documentation/new-rules-docs.png&quot; alt=&quot;Screen capture of the image_alt rule’s documentation&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The rule’s different configuration options are clearly visible, copy-pasteable, each with a description.&lt;/li&gt;
  &lt;li&gt;Cases where the rule check “succeeds” are well documented, alongside a comment, and matching configuration.&lt;/li&gt;
  &lt;li&gt;Same for problematic cases, which even show the actual error message!&lt;/li&gt;
  &lt;li&gt;All of this is toggle-able between the different configuration formats supported by Curlylint!&lt;/li&gt;
  &lt;li&gt;There are follow-up resources available for developers who want more information about the rule.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This feels like a pretty big step up compared to the previous documentation, and should hopefully make it as easy as possible for people to start using the linter for their templates.&lt;/p&gt;

&lt;h2 id=&quot;how-this-works&quot;&gt;How this works&lt;/h2&gt;

&lt;p&gt;The majority of the rules’ documentation is generated from their metadata:&lt;/p&gt;

&lt;h3 id=&quot;json-schema&quot;&gt;JSON Schema&lt;/h3&gt;

&lt;p&gt;The configuration options are all defined with &lt;a href=&quot;https://json-schema.org/&quot;&gt;JSON Schema&lt;/a&gt;.Currently this is only used to generate the documentation, but in the future I would also like to make this validate configurations as Curlylint runs.&lt;/p&gt;

&lt;p&gt;JSON Schema is particularly good for this because it has built-in support for the schema to be self-documenting – adding titles, descriptions, and examples, which are all used to generate the documentation. Here is the schema of the &lt;a href=&quot;https://www.curlylint.org/docs/rules/html_has_lang&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html_has_lang&lt;/code&gt;&lt;/a&gt; rule as an example:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;oneOf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;const&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The `lang` attribute must be present.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;examples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The `lang` attribute must match the configured language tag.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;examples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-US&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;test-cases&quot;&gt;Test cases&lt;/h3&gt;

&lt;p&gt;The success / fail sections are simply coming from the project’s test suite! I always prefer to invest time writing extensive unit tests for projects of this kind. Some of the test cases simply have a flag marking them as “documentation examples”:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Check lang is present&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;template&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;html lang=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;en&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s the same story for “fail” cases, where the annotations are simply generated from the expected output (issues):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Missing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;template&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;example&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;file&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;column&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;code&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html_has_lang&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The `&amp;lt;html&amp;gt;` tag should have a `lang` attribute with a valid value, describing the main language of the page&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;mdx&quot;&gt;MDX&lt;/h3&gt;

&lt;p&gt;All of this comes together with &lt;a href=&quot;https://mdxjs.com/&quot;&gt;MDX&lt;/a&gt;, a Markdown-inspired syntax which makes it possible to use JSX directly inside documents, thereby making it possible to use React components, like the language tabs and code snippets with annotations:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Tabs&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;groupId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;config-language&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;defaultValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;TOML&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;toml&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TabItem&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;toml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CodeSnippet&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;snippet=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`# The \`alt\` attribute must be present.\nimage_alt = true`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;annotations=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;toml&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TabItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TabItem&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CodeSnippet&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;snippet=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`# The \`alt\` attribute must be present.\ncurlylint --rule 'image_alt: true' .`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;annotations=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TabItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Docusaurus supports MDX out of the box, and provides the “Tabs” components. The CodeSnippet component is originally from Docusaurus but has been customized to support basic annotations.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Have I mentioned how important I think it is for a linter to have great docs? Well, now is the time for Curlylint to live up to this!</summary></entry><entry><title type="html">Interview exercises for web developers</title><link href="https://thib.me/interview-exercises-for-web-developers" rel="alternate" type="text/html" title="Interview exercises for web developers" /><published>2020-07-05T22:05:21+00:00</published><updated>2020-07-05T22:05:21+00:00</updated><id>https://thib.me/interview-exercises-for-web-developers</id><content type="html" xml:base="https://thib.me/interview-exercises-for-web-developers">&lt;p&gt;Here are a couple of interview exercises I like to give, which are relatively open to varied approaches.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;before-the-interview-form-validation&quot;&gt;Before the interview: Form validation&lt;/h2&gt;

&lt;p&gt;I’ve always liked Springload’s &lt;a href=&quot;https://github.com/springload/form-validation-problem&quot;&gt;form validation problem&lt;/a&gt;. It’s a relatively simple problem in apparence – implementing form validation for a basic HTML form, with a few fields, and a few validation rules.&lt;/p&gt;

&lt;p&gt;What I think makes it really good is that it’s possible to approach this in many different ways – and there are lots of things for candidates to demonstrate beyond the basic implementation of the form validation – knowledge in any of those areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Documentation&lt;/li&gt;
  &lt;li&gt;Accessibility&lt;/li&gt;
  &lt;li&gt;Progressive enhancement&lt;/li&gt;
  &lt;li&gt;Browser support&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Tooling&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Form validation is a particularly interesting problem in web development because there is a fair amount of state to manage – validation errors for each fields, as well as whether the fields have been interacted with or not to decide when to display the errors.&lt;/p&gt;

&lt;p&gt;Candidates can take a shot at this with vanilla JS, a ready-made library like &lt;a href=&quot;https://parsleyjs.org/&quot;&gt;Parsley&lt;/a&gt;, or can be asked to do this with React (Redux Forms, Formik, bespoke?), or even back-end technologies.&lt;/p&gt;

&lt;h2 id=&quot;at-the-interview-build-this&quot;&gt;At the interview: Build This&lt;/h2&gt;

&lt;p&gt;This is my go-to “how would you do this” problem, initially encountered at Codemate, which can be used to interview full-stack developers (any stack), or front-end or back-end only. The candidate is shown a specific UI (via a wireframe, screenshot, or real-world app), and is then asked to explain how they would build it within the context of a real project.&lt;/p&gt;

&lt;p&gt;Depending on the candidate’s experience level, role, (and level of interview stress), this can be run as an open-ended conversation driven by the candidate directly, or as a series of guided themes / questions.&lt;/p&gt;

&lt;p&gt;The whole exercise takes 30min to 1h depending on what is covered – spend a good 5 mins on the problem statement + intro &amp;amp; architecture, then move through the themes.&lt;/p&gt;

&lt;p&gt;I really like this because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It makes for a more conversational interview – even if the questions are fixed, it’s more natural to have them with a specific app to think about.&lt;/li&gt;
  &lt;li&gt;For candidates, it makes it easier to relate to their past work, for example reflecting on similar apps they’ve built.&lt;/li&gt;
  &lt;li&gt;For interviewers, it does give enough structure to the interview that candidates’ answers can easily be categorised on the fly, and then compared to those of other candidates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This works particularly well if the wireframe has quite a few things going on visually, with different types of data, a user account, and a form or two.&lt;/p&gt;

&lt;h2 id=&quot;template-build-this-twitter-clone&quot;&gt;Template: Build This Twitter Clone&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/interview-exercises-for-web-developers/twitter-wireframe.png&quot; alt=&quot;Wireframe of a Twitter clone, showing a logged-in user’s timeline, with few tweets, a form to post a new tweet, and the user’s profile details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Placeholder wireframe from &lt;a href=&quot;https://www.flickr.com/photos/doos/4689874175/in/photostream/&quot;&gt;Rob Enslin&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;fundamentals&quot;&gt;Fundamentals&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Introduction&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Identify the features of this UI&lt;/li&gt;
      &lt;li&gt;Identify the underlying data / models&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tech stack and architecture&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Rough architecture of the app (front-end and back-end)&lt;/li&gt;
      &lt;li&gt;Overall stack, centred around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tech we care about&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Integrations &amp;amp; APIs&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Integration with the backend, endpoints and payloads&lt;/li&gt;
      &lt;li&gt;Client-side integrations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data management&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;State management tools with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;tech&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Data flow for a given feature (e.g. search)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;electives&quot;&gt;Electives&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mobile-friendly UI&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;RWD, cross-browser support&lt;/li&gt;
      &lt;li&gt;Offline capabilities&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Security considerations for a new feature: user accounts with saved searches&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Testing / Tooling&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Here are a couple of interview exercises I like to give, which are relatively open to varied approaches.</summary></entry><entry><title type="html">Procuring accessibility audits</title><link href="https://thib.me/procuring-accessibility-audits" rel="alternate" type="text/html" title="Procuring accessibility audits" /><published>2020-07-03T18:15:08+00:00</published><updated>2020-07-03T18:15:08+00:00</updated><id>https://thib.me/procuring-accessibility-audits</id><content type="html" xml:base="https://thib.me/procuring-accessibility-audits">&lt;p&gt;Following from &lt;a href=&quot;/accessibility-audits-getting-started&quot;&gt;Accessibility audits: getting started&lt;/a&gt;, here are practical tips on how to procure / schedule an accessibility audit, and how to structure the report.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Accessibility audits can take anywhere from 10 minutes to a week, depending on the scope of the audit, the amount of manual testing required, and the expected report format.&lt;/p&gt;

&lt;p&gt;The main factors for an estimate are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What’s the purpose of the audit? Do we want a “compliant = yes/no”, or create a backlog of improvements, or something in-between&lt;/li&gt;
  &lt;li&gt;What’s the scope? How many sites / page types / pages. Provide links to a few pages so we have a sense of how many issues we’re likely to find (the more, the longer it takes to report them).&lt;/li&gt;
  &lt;li&gt;What kind of report / output do they need? Either something for stakeholders, or developers, or both. Generally it takes nearly as much time to write the report as to find the issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Avoid compliance pass/fail audits, which are onerous, and for which we aren’t competent. Get in touch with &lt;a href=&quot;https://digitalaccessibilitycentre.org/&quot;&gt;DAC&lt;/a&gt;, &lt;a href=&quot;https://www.rnib.org.uk/rnib-business&quot;&gt;RNIB&lt;/a&gt;, &lt;a href=&quot;https://abilitynet.org.uk/accessibility-services/products-and-services&quot;&gt;AbilityNet&lt;/a&gt;, or &lt;a href=&quot;https://www.deque.com/&quot;&gt;Deque&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Suggested format for medium websites&lt;/strong&gt;: “backlog of improvements”, for which we can make a proposal for 1 to 4 days, based on automated tests, manual tests for 5 to 10 page types. A one-pager “executive summary” report, and adjoining list of issues / backlog as a spreadsheet or Trello board.&lt;/p&gt;

&lt;h2 id=&quot;audit-strategy&quot;&gt;Audit strategy&lt;/h2&gt;

&lt;h3 id=&quot;target-standards&quot;&gt;Target standards&lt;/h3&gt;

&lt;p&gt;First, define the target standard for the audit. Generally WCAG 2.1 AA, or Section 508. We will consider the latest Section 508 version, post January 2018 update to track WCAG2.0 AA.&lt;/p&gt;

&lt;p&gt;If relevant, also define which standards are out of scope, such as compliance for the Rehabilitation Act and ADA. Compliance for WCAG2.1 AAA is out of scope, but we may provide AAA issues as relevant if they seem to be easily solvable.&lt;/p&gt;

&lt;h3 id=&quot;audit-scope&quot;&gt;Audit scope&lt;/h3&gt;

&lt;p&gt;Make a clear list of URLs to audit. Define whether the audit is on a production or staging environment. If there is any dynamic functionality to audit, define to what extent.&lt;/p&gt;

&lt;h3 id=&quot;report-format&quot;&gt;Report format&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Keep it actionable. We don’t want to do pass/fail compliance audits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;“Cover sheet” / written document with overview of common issues, and a scoring of how feasible it seems to reach compliance &amp;amp; effort involved.&lt;/li&gt;
  &lt;li&gt;Tabular data / spreadsheet with individual issues at a more granular level. Including testing tool if relevant, &amp;amp; proposed solution if time allows.&lt;/li&gt;
  &lt;li&gt;As relevant, direct output from automated / semi-automated testing tools&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;high-level-testing-methodology&quot;&gt;High-level testing methodology&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;See &lt;a href=&quot;/accessibility-audits-getting-started&quot;&gt;Accessibility audits: getting started&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a baseline only, please adapt as needed. For all identified pages,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bulk automated page checks with &lt;a href=&quot;https://validator.github.io/validator/&quot;&gt;V.Nu HTML5 validator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bulk automated page checks with &lt;a href=&quot;https://github.com/pa11y/pa11y&quot;&gt;Pa11y&lt;/a&gt; – HTML CodeSniffer, Axe.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a relevant subset of pages,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single-page semi-automated checks with either &lt;a href=&quot;https://accessibilityinsights.io/&quot;&gt;Accessibility Insights&lt;/a&gt; or similar.&lt;/li&gt;
  &lt;li&gt;Manual keyboard navigation checks&lt;/li&gt;
  &lt;li&gt;Manual colour contrast check for non-text UI elements and images&lt;/li&gt;
  &lt;li&gt;Manual screen reader navigation check with VoiceOver in macOS Safari&lt;/li&gt;
  &lt;li&gt;Manual zoom &amp;amp; magnification testing with Chrome &amp;amp; macOS Zoom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a smaller subset of high-value pages,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Full screen reader testing with VoiceOver in macOS Safari&lt;/li&gt;
  &lt;li&gt;Full screen reader testing with NVDA in Firefox ESR&lt;/li&gt;
  &lt;li&gt;Full screen reader testing with VoiceOver in iOS Safari&lt;/li&gt;
  &lt;li&gt;Mobile touch interaction testing with iOS Safari&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outcome-of-the-audit&quot;&gt;Outcome of the audit&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Report to project stakeholders&lt;/li&gt;
  &lt;li&gt;Guidance for implementers&lt;/li&gt;
  &lt;li&gt;Report to other vendors if needed&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Following from Accessibility audits: getting started, here are practical tips on how to procure / schedule an accessibility audit, and how to structure the report.</summary></entry><entry><title type="html">Welcome to curlylint.org!</title><link href="https://thib.me/welcome-to-curlylint" rel="alternate" type="text/html" title="Welcome to curlylint.org!" /><published>2020-06-19T22:03:29+00:00</published><updated>2020-06-19T22:03:29+00:00</updated><id>https://thib.me/welcome-to-curlylint</id><content type="html" xml:base="https://thib.me/welcome-to-curlylint">&lt;p&gt;Curlylint now has a website! 🎉&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;While the linter itself is still very experimental, and subject to major changes, I believe that having great documentation is a much more important step than any single feature or linting rule of the linter. Particularly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Documenting the rules, with their respective configuration options, with lots of examples.&lt;/li&gt;
  &lt;li&gt;Documenting CLI options, and (hopefully) future editor integrations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a standalone site (as opposed to Markdown files in GitHub), I can create clean URLs for each of the rules, that can then be used directly in the CLI’s output. This is all inspired by &lt;a href=&quot;https://eslint.org/&quot;&gt;ESLint&lt;/a&gt;, which is years ahead of any other static analysis tool I’ve ever used.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/welcome-to-curlylint/eslint-awesome.gif&quot; alt=&quot;Screen capture of ESLint in VS Code, with link to a rule’s documentation, and options to automatically disable the rule&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ESLint’s VS Code integration, with link straight to the rule’s documentation, and options to auto-disable the violation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-website&quot;&gt;The website&lt;/h2&gt;

&lt;p&gt;The website itself is built with &lt;a href=&quot;https://v2.docusaurus.io/&quot;&gt;Docusaurus v2&lt;/a&gt;. I don’t think this matters too much – the main features I was after were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A focus on documentation websites – with versioning, code highlighting.&lt;/li&gt;
  &lt;li&gt;Being able to write docs in Markdown without having to worry about creating a theme, or manually writing HTML / CSS.&lt;/li&gt;
  &lt;li&gt;Having a blog section and blogging features directly on the same docs website.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fact that it’s built with React is a plus that will come in handy should I want to build more bespoke pages. MDX is a plus too.&lt;/p&gt;

&lt;h2 id=&quot;up-next&quot;&gt;Up next&lt;/h2&gt;

&lt;p&gt;Once the website is up and running, there are two things I’d really like to make:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An editor integration with VS Code. I’ve had some exposure to this with &lt;a href=&quot;https://github.com/stylelint/vscode-stylelint&quot;&gt;vscode-stylelint&lt;/a&gt;, but still don’t have the clearest understanding of how best to do this for a Python CLI.&lt;/li&gt;
  &lt;li&gt;An online playground similar to that of &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier&lt;/a&gt;. I think it’s the best demonstrator of a tool’s capabilities, and it simplifies bug reports / quick tests greatly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Onwards!&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Curlylint now has a website! 🎉</summary></entry><entry><title type="html">Timing attacks, everywhere</title><link href="https://thib.me/timing-attacks-everywhere" rel="alternate" type="text/html" title="Timing attacks, everywhere" /><published>2020-05-04T21:15:08+00:00</published><updated>2020-05-04T21:15:08+00:00</updated><id>https://thib.me/timing-attacks-everywhere</id><content type="html" xml:base="https://thib.me/timing-attacks-everywhere">&lt;p&gt;Ever heard of &lt;a href=&quot;https://en.wikipedia.org/wiki/Timing_attack&quot;&gt;timing attacks&lt;/a&gt;? Turns out timing attack vulnerabilities are pretty common. It’s unclear to me how practical those attacks are, but I wouldn’t risk it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;finding-timing-attack-vulnerabilities&quot;&gt;Finding timing attack vulnerabilities&lt;/h2&gt;

&lt;p&gt;The gist of a timing attack is an &lt;em&gt;&lt;a href=&quot;http://cwe.mitre.org/data/definitions/208.html&quot;&gt;observable timing discrepancy&lt;/a&gt;&lt;/em&gt; in access control code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some code compares two values in order to determine whether something is authorised or not, for example comparing the user input with a stored plaintext password, or even comparing a hashed version of the user input against a password hash.&lt;/li&gt;
  &lt;li&gt;Turns out, the programming language executing that comparison is smart enough to stop the comparison as early as one of the characters stops matching – instead of having to compare all of the characters of the two strings.&lt;/li&gt;
  &lt;li&gt;If the execution time of the comparison can be observed – then an attacker can determine whether their supplied input is getting closer to the compared value, by seeing the execution take gradually longer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What does this look like in practice? This:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PasswordViewRestrictionForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleaned_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restriction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValidationError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The password you have entered is not correct. Please try again.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or that:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configured_username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configured_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# [...]
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configured_username&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configured_password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…or &lt;a href=&quot;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7576&quot;&gt;in Ruby (Rails)&lt;/a&gt;,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassMethods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;http_basic_authenticate_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;before_filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:realm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;authenticate_or_request_with_http_basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:realm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Application&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or &lt;a href=&quot;https://github.com/flawyte/now-basic-auth/issues/4&quot;&gt;in Node (Express)&lt;/a&gt;,&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;protect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/_static&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;now-basic-auth.node-static-auth&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;onAuthFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Restricted area, please login (admin:admin).&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you know what to look for, timing attack vulnerabilities really are everywhere. In &lt;a href=&quot;https://github.com/flawyte/now-basic-auth/issues/4&quot;&gt;basic auth code&lt;/a&gt;. In &lt;a href=&quot;https://github.com/tm-kn/django-basic-auth-ip-whitelist/security/advisories/GHSA-m38j-pmg3-v5x5&quot;&gt;more basic auth code&lt;/a&gt;, and also in &lt;a href=&quot;https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6&quot;&gt;password-protected content&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For me, this came up because I was looking for a good Express basic auth implementation, stumbled upon &lt;a href=&quot;https://github.com/LionC/express-basic-auth&quot;&gt;express-basic-auth&lt;/a&gt;, which works well, and then wondered – “oh, are other libraries using a &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b&quot;&gt;timing-safe comparison function&lt;/a&gt;?” Lots weren’t.&lt;/p&gt;

&lt;h2 id=&quot;protecting-yourself&quot;&gt;Protecting yourself&lt;/h2&gt;

&lt;p&gt;As mentioned above, all sensitive comparison checks should use timing-safe comparison functions such as Node’s &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b&quot;&gt;crypto.timingSafeEqual&lt;/a&gt; or Python 3.4+’s &lt;a href=&quot;https://docs.python.org/3/library/hmac.html#hmac.compare_digest&quot;&gt;hmac.compare_digest&lt;/a&gt; (or Django’s &lt;a href=&quot;https://github.com/django/django/blob/659a73bc0a2df9be856e23fcfc6cc66d0d1a35fd/django/utils/crypto.py#L77&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;crypto.constant_time_compare&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;proactively-looking-for-similar-issues&quot;&gt;Proactively looking for similar issues&lt;/h3&gt;

&lt;p&gt;You will want to look for all access control code that uses the programming language’s built-in comparison operators (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;==&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!=&lt;/code&gt;). I’m very excited about the potential of platforms like &lt;a href=&quot;https://lgtm.com/&quot;&gt;LGTM&lt;/a&gt; and their &lt;a href=&quot;https://securitylab.github.com/tools/codeql&quot;&gt;CodeQL language&lt;/a&gt; to find vulnerabilities like this automaticaly. Here is a sample query:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Compare&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%key%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%password%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%auth%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAComparator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%sign%&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a relatively naive query, but it helped me identify issues like Wagtail’s bypass-able &lt;a href=&quot;https://github.com/wagtail/wagtail/issues/6127&quot;&gt;image serve signature check&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to try this out for yourself, &lt;a href=&quot;https://securitylab.github.com/tools/codeql&quot;&gt;GitHub’s Security Labs&lt;/a&gt; have the most extensive documentation on how to use this.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Tools to probe for timing attack vulnerabilities:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ffleming/timing_attack&quot;&gt;https://github.com/ffleming/timing_attack&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/SakiiR/timeauth&quot;&gt;https://github.com/SakiiR/timeauth&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blackhat.com/docs/us-15/materials/us-15-Morgan-Web-Timing-Attacks-Made-Practical.pdf&quot;&gt;Timing Attacks Made Practical, Blackhat 2015&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/thibaudcolas/f68fb257abb6dc6164be0c01c4f42367&quot;&gt;Initial research for django-basic-auth-ip-whitelist vulnerability&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/tm-kn/django-basic-auth-ip-whitelist/security/advisories/GHSA-m38j-pmg3-v5x5&quot;&gt;CVE-2020-4071&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/thibaudcolas/bf80b119225dacb8463aab7d7e527bd6&quot;&gt;Initial research for Wagtail vulnerability&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/wagtail/wagtail/security/advisories/GHSA-jjjr-3jcw-f8v6&quot;&gt;CVE-2020-11037&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Ever heard of timing attacks? Turns out timing attack vulnerabilities are pretty common. It’s unclear to me how practical those attacks are, but I wouldn’t risk it.</summary></entry><entry><title type="html">Accessibility audits: getting started</title><link href="https://thib.me/accessibility-audits-getting-started" rel="alternate" type="text/html" title="Accessibility audits: getting started" /><published>2020-05-01T18:15:08+00:00</published><updated>2020-05-01T18:15:08+00:00</updated><id>https://thib.me/accessibility-audits-getting-started</id><content type="html" xml:base="https://thib.me/accessibility-audits-getting-started">&lt;p&gt;Accessibility audits can be daunting to get started with. Here are my recipes to deliver accessibility audits for web projects, combining multiple layers of automation with manual testing to get the best of both worlds.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;auditing-strategy&quot;&gt;Auditing strategy&lt;/h2&gt;

&lt;p&gt;First, determine what standard to audit for. &lt;a href=&quot;https://www.gov.uk/service-manual/helping-people-to-use-your-service/understanding-wcag&quot;&gt;WCAG 2.1 AA&lt;/a&gt; is generally a good start, as the standard that underlines many countries’ regulations. Don’t stop at any given standard though – the goal of an audit really is to identify improvements, rather than compliance box ticking.&lt;/p&gt;

&lt;p&gt;With this in mind, start with automated tools to find as many issues as possible. Then, we can dedicate more time to more thorough manual testing of specific pages or components.&lt;/p&gt;

&lt;p&gt;As a developer, I like the audit to be based on tools that can be used in automated test suites. Continuous integration capabilities are a big plus too, making it much easier for the site to keep being tested consistently after the auditing work is over.&lt;/p&gt;

&lt;h2 id=&quot;accessibility-audits-for-beginners&quot;&gt;Accessibility audits for beginners&lt;/h2&gt;

&lt;p&gt;It’s worth pointing out early – while some parts of my approach are very beginner-friendly – others rely on years of experience with accessibility guidelines and usability best practices. If you don’t know where to start, here are the easiest first steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If you’re familiar with command-line tools and want something quick, grab &lt;a href=&quot;https://github.com/pa11y/pa11y&quot;&gt;Pa11y&lt;/a&gt; and point it at pages.&lt;/li&gt;
  &lt;li&gt;If you want to analyse a page more thoroughly, use &lt;a href=&quot;https://accessibilityinsights.io/&quot;&gt;Accessibility Insights&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;If you have money, get &lt;a href=&quot;https://www.powermapper.com/products/sortsite/&quot;&gt;SortSite&lt;/a&gt; or &lt;a href=&quot;https://tenon.io/&quot;&gt;Tenon&lt;/a&gt;. I haven’t used these myself, those recommendations are only based on the invaluable &lt;a href=&quot;https://alphagov.github.io/accessibility-tool-audit/&quot;&gt;GDS accessibility tools audit&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/accessibility-audits-getting-started/accessibility-insights-tab-stops.png&quot; alt=&quot;Screenshot of Accessibility Insights tab stops&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accessibility Insights’ tab stops tool is invaluable to identify strange tab orders, and optimise keyboard navigation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;intermediate-level-auditing&quot;&gt;Intermediate-level auditing&lt;/h2&gt;

&lt;h3 id=&quot;source-code-analysis&quot;&gt;Source code analysis&lt;/h3&gt;

&lt;p&gt;If possible, this is always a valuable first step. Identifying issues directly in the code will make them much easier to fix, and improves your chances of finding issues that might not be identifiable during manual testing because they rely on a specific state of the app or site.&lt;/p&gt;

&lt;p&gt;Linters are very useful here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;, &lt;a href=&quot;https://github.com/evcohen/eslint-plugin-jsx-a11y&quot;&gt;eslint-plugin-jsx-a11y&lt;/a&gt; for React, which has the most advanced static analysis tools of any front-end stack.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thibaudcolas/curlylint&quot;&gt;curlylint&lt;/a&gt; for HTML templates, my (experimental! 💥) attempt at bridging that gap.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also audit code manually, by searching the project’s source. Here are common patterns I search for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Usage of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;role&lt;/code&gt; attribute. It’s very easy to misuse – roles that don’t exist, that need specific parents or children, that are redundant with the element’s intrinsic role. Roles that have no practical impact without further ARIA attributes (most commonly labels, or state).&lt;/li&gt;
  &lt;li&gt;Usage of ARIA attributes. They are also &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/#no_aria_better_bad_aria&quot;&gt;easy to misuse&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Tables markup. Tables need a caption, and headers that define their scope.&lt;/li&gt;
  &lt;li&gt;Button markup. Misusing anchor tags for buttons.&lt;/li&gt;
  &lt;li&gt;Forms markup. Making sure they use the correct native controls, with sensible attributes.&lt;/li&gt;
  &lt;li&gt;Tabs, menus, dropdowns, toggles. It’s quick to check whether they have any kind of keyboard navigation implemented, and whether they have the correct ARIA attributes set for any given state.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bulk-page-checks&quot;&gt;Bulk page checks&lt;/h3&gt;

&lt;p&gt;After looking at the source, the next step is to look at pages in “bulk” mode – running automated tools that scan as much of the site as possible. My preference is for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;https://validator.github.io/validator/&quot;&gt;V.Nu HTML5 validator&lt;/a&gt;. Either the Docker image, or the pre-compiled CLI binaries, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vnu &amp;lt;url&amp;gt;&lt;/code&gt;. Generally I will either do this for the whole sitemap, or a subset of URLs.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pa11y/pa11y-ci&quot;&gt;pa11y-ci&lt;/a&gt;, or Pa11y directly, for the whole sitemap or a subset of URLs if there is a need for further automation. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pa11y-ci --config &amp;lt;my config&amp;gt; --sitemap &amp;lt;project sitemap&amp;gt; --json &amp;gt; sitemap-report.json&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pa11y is worth a special mention here. Pa11y is a wrapper of &lt;a href=&quot;https://github.com/dequelabs/axe-core&quot;&gt;Axe&lt;/a&gt; and &lt;a href=&quot;https://github.com/squizlabs/HTML_CodeSniffer&quot;&gt;HTML_CodeSniffer&lt;/a&gt;, which do the actual accessibility checks. It allows those tools to be run in bulk mode, over many pages, or at different states of a page by interacting with it automatically.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/accessibility-audits-getting-started/pa11y-ci-sitemap-mode.png&quot; alt=&quot;Screenshot of pa11y-ci output in sitemap mode&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Testing hundreds of a pages in a one-liner – thanks pa11y-ci!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is a basic configuration file, summarising how I tend to use it:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Homepage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://www.example.com/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;basicAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;username:password&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Basic &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;basicAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;WCAG2AAA&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;axe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;htmlcs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;🚧 Head over to &lt;a href=&quot;https://github.com/thibaudcolas/wagtail-tooling&quot;&gt;wagtail-tooling&lt;/a&gt; for a more advanced example of using Pa11y on a large-scale project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;single-page-checks&quot;&gt;Single-page checks&lt;/h3&gt;

&lt;p&gt;Now let’s look at intermediate techniques to apply per page. Depending on the site’s size, number of different page types, and budget for the audit, I would generally apply those checks on a sample of between five to ten page types. First,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/pa11y/pa11y&quot;&gt;Pa11y&lt;/a&gt;, if not already used in CI mode. Make sure it runs both HTML_CodeSniffer and Axe.&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://accessibilityinsights.io/&quot;&gt;Accessibility Insights&lt;/a&gt; extension from Microsoft, with its FastPass mode, which also uses Axe under the hood.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then in the browser, there are a lot of semi-automated tests worth doing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With Accessibility Insights – use the colour, heading, landmark tools to quickly visualise the page structure and spot issues.&lt;/li&gt;
  &lt;li&gt;With a screen reader’s navigation (e.g. &lt;a href=&quot;https://accessibility.psu.edu/screenreaders/voiceover/&quot;&gt;VoiceOver Rotor&lt;/a&gt;), inspect all of the page’s landmarks, headings, images, tables, frames, form elements, links and buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only about &lt;a href=&quot;https://alphagov.github.io/accessibility-tool-audit/&quot;&gt;30 to 40%&lt;/a&gt; of accessibility issues can be found with fully automated tools, so these semi-automated checks are a great way to go beyond that, without having to spend hours manually navigating pages.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/accessibility-audits-getting-started/voiceover-rotor-safari.png&quot; alt=&quot;Screenshot of the VoiceOver Rotor, in Safari, show a list of landmarks for a site’s homepage. Some landmarks have custom labels.&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The VoiceOver rotor is a very convenient way to get started with screen reader testing for beginners.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;manual-testing-for-high-value-pages&quot;&gt;Manual testing for high-value pages&lt;/h3&gt;

&lt;p&gt;Manual tests are the most time-consuming and require the most expertise. We want to navigate the site site in the same way a user of assistive technology would, focusing on parts of the experience that automated tests cannot assess. I generally advise to try the following:&lt;/p&gt;

&lt;h4 id=&quot;zoom-level&quot;&gt;Zoom level&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Is the whole page usable with 200% to 400% page-level zoom?&lt;/li&gt;
  &lt;li&gt;Does the site support browsers’ font resizing features?&lt;/li&gt;
  &lt;li&gt;Are there any issues when using an on-screen magnifier?&lt;/li&gt;
  &lt;li&gt;Are there areas of the site that require bidirectional scrolling because of the zoom level?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;colour&quot;&gt;Colour&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Are there any non-text UI elements for which the contrast is too low?&lt;/li&gt;
  &lt;li&gt;Any :focus or other active states that are reliant on colour alone, or too low contrast?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;keyboard-navigation&quot;&gt;Keyboard navigation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Can the whole page be used with a keyboard only?&lt;/li&gt;
  &lt;li&gt;Are there &lt;a href=&quot;https://www.w3.org/TR/UNDERSTANDING-WCAG20/keyboard-operation-trapping.html&quot;&gt;keyboard traps&lt;/a&gt;?&lt;/li&gt;
  &lt;li&gt;Are there parts of the page where focus should be trapped but isn’t?&lt;/li&gt;
  &lt;li&gt;Are the tab stops logical?&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;screen-reader-navigation&quot;&gt;Screen reader navigation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Can the whole page be navigated with a screen reader?&lt;/li&gt;
  &lt;li&gt;Are there relevant things on the page that aren’t being announced?&lt;/li&gt;
  &lt;li&gt;Or things that shouldn’t be announced? E.g. decorative images, or repetitive text.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pointer-touch-and-click-navigation&quot;&gt;Pointer (touch and click) navigation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Are pointer targets big enough, and not too close to one another?&lt;/li&gt;
  &lt;li&gt;Are there areas of the page that are hard to scroll (especially on mobile)?&lt;/li&gt;
  &lt;li&gt;Are there areas on the page that require horizontal scrolling (especially on mobile)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;This barely scratches the surface&lt;/strong&gt;, especially when it comes to screen reader usage. Test with &lt;a href=&quot;https://docs.wagtail.io/en/stable/contributing/developing.html#accessibility-targets&quot;&gt;multiple screen readers&lt;/a&gt; if possible – my go-tos being VoiceOver with Safari on macOS &amp;amp; iOS, and NVDA with Firefox on Windows.&lt;/p&gt;

&lt;h2 id=&quot;expert-level-accessibility-compliance-testing&quot;&gt;Expert-level accessibility compliance testing&lt;/h2&gt;

&lt;p&gt;All of the above is great in order to make a website accessible, but to assess compliance with standards, you need to know the actual standards, and test for each of the compliance criteria. For WCAG 2.1, I recommend to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Know all of the WCAG2.1 A, AA, AAA success criteria – refer to the &lt;a href=&quot;https://alphagov.github.io/wcag-primer/all.html#common-mistakes&quot;&gt;GOV.UK WCAG 2.1 Primer&lt;/a&gt; for a “cheatsheet” version.&lt;/li&gt;
  &lt;li&gt;For each commonly-used component, know which success criteria are relevant – refer to the official &lt;a href=&quot;https://www.w3.org/WAI/WCAG21/quickref/&quot;&gt;WCAG2.1 quick reference&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Know about established &lt;a href=&quot;https://www.w3.org/TR/wai-aria-practices-1.1/&quot;&gt;ARIA practices&lt;/a&gt;, and their respective browser support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you’re ready, dive through Accessibility Insights’ &lt;a href=&quot;https://accessibilityinsights.io/docs/en/web/getstarted/assessment&quot;&gt;Assessment tool&lt;/a&gt;, which is by far the most advanced freely available accessibility compliance testing tool there is.&lt;/p&gt;

&lt;h2 id=&quot;beyond-audits&quot;&gt;Beyond audits&lt;/h2&gt;

&lt;p&gt;Congratulations, you’re now equipped to audit websites! Make the most of those skills to identify improvements on the sites you build and use – but keep in mind that no single audit can deliver ongoing, sustainable accessibility.&lt;/p&gt;

&lt;p&gt;Going beyond audits, it’s worth investing into training to create accessible experiences as a default. Also look into opportunities to have accessibility be part of your normal process – whether that’s by having &lt;a href=&quot;https://github.com/storybookjs/storybook/tree/master/addons/a11y&quot;&gt;tests in your UI library&lt;/a&gt; as a developer, or &lt;a href=&quot;https://github.com/neon-jungle/wagtail-accessibility&quot;&gt;accessibility features in the CMS&lt;/a&gt; as an editor. More on that in a future post!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Thank you to Jane, Paul, Tom, and Steven for their help with this post.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Accessibility audits can be daunting to get started with. Here are my recipes to deliver accessibility audits for web projects, combining multiple layers of automation with manual testing to get the best of both worlds.</summary></entry><entry><title type="html">Conventions to organize React projects</title><link href="https://thib.me/conventions-to-organize-react-projects" rel="alternate" type="text/html" title="Conventions to organize React projects" /><published>2020-04-20T22:03:29+00:00</published><updated>2020-04-20T22:03:29+00:00</updated><id>https://thib.me/conventions-to-organize-react-projects</id><content type="html" xml:base="https://thib.me/conventions-to-organize-react-projects">&lt;p&gt;I’ve spent a lot of time thinking of how best to structure React projects over the last few years. This is especially important when React is a central part of the project’s front-end tech stack, as React in itself has very few opinions about how to organize code (it’s a library, not a framework). Here are my notes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration&lt;/h2&gt;

&lt;p&gt;My favourite file structure is that of &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;. In particular,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At the top level, dividing code by functional area&lt;/li&gt;
  &lt;li&gt;Within each functional area, the files’ names follow an established convention based on non-functional considerations.&lt;/li&gt;
  &lt;li&gt;If needed, code can then be broken up by functional area for each type of file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I really like about those conventions is that they give the code as much room to grow as possible – add more apps as the project grows, remove whole apps if they’re no longer needed, and sub-divide individual apps if they start getting too big.&lt;/p&gt;

&lt;p&gt;Here is what this looks like in practice:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;demo
├── feedback
│   ├── templates
│   ├── urls.py
│   └── views.py
├── polls
│   ├── admin.py
│   ├── migrations
│   ├── models
│   │   ├── questions.py
│   │   └── choices.py
│   ├── templates
│   │   └── polls
│   │       ├── question_list.html
│   │       └── results.html
│   ├── urls.py
│   └── views.py
├── settings.py
└── urls.py
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polls&lt;/code&gt; is a functional area&lt;/li&gt;
  &lt;li&gt;Within this, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls.py&lt;/code&gt; does all routing-level logic for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If needed, that non-functional can be broken up into further features-oriented files like with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models&lt;/code&gt;, which has separate files.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-overarching-rules&quot;&gt;The overarching rules&lt;/h2&gt;

&lt;p&gt;From that Django baseline, here are rules I like to follow when adapting this to arbitrary technologies.&lt;/p&gt;

&lt;h3 id=&quot;folder-structure&quot;&gt;Folder structure&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Co-locate code by feature rather than file type as much as possible.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.js&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.css&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.test.js&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.md&lt;/code&gt; should all live side-by-side.&lt;/li&gt;
      &lt;li&gt;User profile logic, avatar &amp;amp; bio UI components, profile details update forms – should all be close one-another if possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Avoid files that are just importing and re-exporting code.
    &lt;ul&gt;
      &lt;li&gt;These are useful for libraries that need a clean API, and an overhead for our first-party project code.&lt;/li&gt;
      &lt;li&gt;Modern IDEs support automatically updating file paths as files move, and auto-completing imports.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extract code that is not feature-specific into a reusable “shared” folder.&lt;/li&gt;
  &lt;li&gt;Consider having another “modules” folder for code that is so un-specific to your project that it could just as well come from a dependency.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;naming-conventions&quot;&gt;Naming conventions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Files should be named after their default export as much as possible.
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; component lives in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.js&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For ancilliary files, take the name of the main file and suffix it with the “type”.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.test.js&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.stories.js&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.scss&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Files that represent non-functional considerations can be named after the “app” they are in, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polls.models.js&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Each file name must be unique for the whole project, and convey what the file contains without context.
    &lt;ul&gt;
      &lt;li&gt;Don’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;models.js&lt;/code&gt;. Do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polls.models.js&lt;/code&gt;. Don’t &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urls.js&lt;/code&gt;. Do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;polls.urls.js&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;I always use text search and filters to navigate through code, this makes it much easier.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;import&quot;&gt;Import&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Always import by relative file path.
    &lt;ul&gt;
      &lt;li&gt;Those imports are compatible with the most tools – IDEs, linters, SCMs&lt;/li&gt;
      &lt;li&gt;They can be automatically generated by IDEs.&lt;/li&gt;
      &lt;li&gt;They are very short when code is co-located with its immediate dependencies, which is the most common type of import.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;react-specificites&quot;&gt;React specificites&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Components should be in their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; folder for each app&lt;/li&gt;
  &lt;li&gt;If your tools allow it, always start by co-locating the component’s code, documentation, styles, data dependencies, all in the same file.
    &lt;ul&gt;
      &lt;li&gt;Break it down into separate co-located files if it gets too big.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Components should have their own folder if the component is made up of more than one file (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.js&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button.test.js&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;If React is your main UI building block, consider having a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; folder for page-level components, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;components&lt;/code&gt; folder gets too big.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;redux-specificities&quot;&gt;Redux specificities&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Follow the Ducks methodology, ideally using &lt;a href=&quot;https://redux-starter-kit.js.org/&quot;&gt;Redux Toolkit&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Co-locate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; code in the component’s source. No one wants to jump back and forth between “container” and “dumb” components.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;in-practice&quot;&gt;In practice&lt;/h2&gt;

&lt;p&gt;Here is a bigger React project structured with this methodology:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;.
├── admin.entry.js
├── client.entry.js
├── counsellor.entry.js
├── booking
│   ├── booking.actions.js
│   ├── booking.constants.js
│   ├── booking.models.js
│   ├── booking.models.test.js
│   ├── booking.reducer.js
│   ├── booking.routes.js
│   ├── booking.types.js
│   └── components
│   ├── AvailabilityPicker
│   │   ├── AvailabilityPicker.js
│   │   ├── AvailabilityPicker.scss
│   │   ├── AvailabilityPicker.stories.js
│   │   ├── CalendarButton
│   │   │   ├── CalendarButton.js
│   │   │   └── CalendarButton.scss
│   │   ├── CounsellorSlots.js
│   │   ├── LoadingOverlay.js
│   │   ├── LoadingOverlay.scss
│   │   ├── SlotOverlay.js
│   │   ├── SlotOverlay.scss
│   │   ├── SlotPicker.js
│   │   └── SlotPicker.scss
│   ├── BookingContent
│   │   ├── BookingContent.js
│   │   └── BookingContent.test.js
│   ├── BookingFlow.js
│   ├── ChooseAvailability.js
│   ├── ConfirmBooking
│   │   ├── ConfirmBooking.js
│   │   └── ConfirmBooking.scss
│   ├── CounsellorBioModal
│   │   ├── CounsellorBioModal.js
│   │   ├── CounsellorBioModal.scss
│   │   └── CounsellorBioModal.stories.js
│   ├── ProgressBar
│   │   ├── ProgressBar.js
│   │   └── ProgressBar.scss
│   └── Register
│   ├── ProvisionalBookingCard.js
│   ├── Register.js
│   ├── Register.scss
│   ├── RegisterPersonal.js
│   ├── RegisterPersonal.test.js
│   └── RegisterSituation.js
├── counsellors
│   ├── components
│   │   ├── ClientDetail.js
│   │   ├── ClientHistory
│   │   │   ├── ClientHistory.js
│   │   │   ├── ClientHistory.scss
│   │   │   ├── ClientHistory.stories.js
│   │   │   └── ClientHistoryCard
│   │   │   ├── ClientHistoryCard.js
│   │   │   └── ClientHistoryCard.scss
│   │   ├── CounsellorDashboard.js
│   │   ├── Timeline
│   │   │   ├── Timeline.js
│   │   │   ├── Timeline.scss
│   │   │   ├── Timeline.stories.js
│   │   │   └── Timeline.test.js
│   │   └── TimelineCard
│   │   ├── TimelineCard.js
│   │   ├── TimelineCard.scss
│   │   ├── TimelineCard.stories.js
│   │   ├── TimelineCard.test.js
│   │   └── **snapshots**
│   │   └── TimelineCard.test.js.snap
│   ├── counsellors.actions.js
│   ├── counsellors.api.js
│   ├── counsellors.reducer.js
│   ├── counsellors.routes.js
│   └── counsellors.types.js
├── dashboard
│   ├── components
│   │   ├── BookingLanding
│   │   │   ├── BookingLanding.js
│   │   │   └── BookingLanding.scss
│   │   ├── CancelBooking
│   │   │   ├── CancelBooking.js
│   │   │   ├── CancelBooking.scss
│   │   │   ├── CancelBookingSuccess.js
│   │   │   └── CancelForm.js
│   │   ├── ChangeBooking
│   │   │   ├── ChangeBooking.js
│   │   │   ├── ChangeBooking.scss
│   │   │   └── ChangeBookingConfirm.js
│   │   ├── Dashboard.js
│   │   ├── DonationRequest
│   │   │   ├── DonationRequest.js
│   │   │   └── DonationRequest.scss
│   │   ├── EndOfSessions
│   │   │   ├── EndOfSessions.js
│   │   │   └── EndOfSessions.scss
│   │   ├── NonVerifiedUserMessage
│   │   │   ├── NonVerifiedUserMessage.js
│   │   │   └── NonVerifiedUserMessage.scss
│   │   └── ViewBookings
│   │   ├── ViewBookings.js
│   │   ├── ViewBookings.scss
│   │   └── ViewBookings.test.js
│   ├── dashboard.actions.js
│   ├── dashboard.api.js
│   ├── dashboard.constants.js
│   ├── dashboard.reducer.js
│   └── dashboard.routes.js
├── main.scss
├── shared
│   ├── api
│   │   ├── timekit.js
│   │   └── video.js
│   ├── components
│   │   ├── AppError
│   │   │   └── AppError.js
│   │   ├── BookingCard
│   │   │   ├── BookingCard.js
│   │   │   ├── BookingCard.mixins.scss
│   │   │   ├── BookingCard.scss
│   │   │   ├── BookingCard.stories.js
│   │   │   └── DNACard
│   │   │   ├── DNACard.js
│   │   │   └── DNACard.scss
│   │   ├── Button
│   │   │   ├── Button.js
│   │   │   └── Button.stories.js
│   │   ├── ClientApp.js
│   │   ├── ContentCard
│   │   │   ├── ContentCard.js
│   │   │   ├── ContentCard.scss
│   │   │   └── ContentCard.stories.js
│   │   ├── CounsellorApp.js
│   │   ├── DashboardWrapper.js
│   │   ├── DatePicker
│   │   │   ├── DatePicker.js
│   │   │   ├── DatePicker.scss
│   │   │   └── DatePicker.stories.js
│   │   ├── ErrorModal
│   │   │   ├── ErrorModal.js
│   │   │   ├── ErrorModal.scss
│   │   │   └── ErrorModal.stories.js
│   │   ├── FormField
│   │   │   ├── FormField.js
│   │   │   ├── FormField.stories.js
│   │   │   ├── RadioGroup.js
│   │   │   └── StyledErrorMessage.js
│   │   ├── Icon
│   │   │   ├── Icon.js
│   │   │   ├── Icon.stories.js
│   │   │   └── Icon.test.js
│   │   ├── InfoBox
│   │   │   ├── InfoBox.js
│   │   │   ├── InfoBox.scss
│   │   │   └── InfoBox.stories.js
│   │   ├── LoadingIndicator
│   │   │   ├── LoadingIndicator.js
│   │   │   ├── LoadingIndicator.scss
│   │   │   └── LoadingIndicator.stories.js
│   │   ├── MainWrapper.js
│   │   ├── Modal
│   │   │   ├── Modal.js
│   │   │   ├── Modal.scss
│   │   │   └── Modal.stories.js
│   │   ├── NoBookings
│   │   │   ├── NoBookings.js
│   │   │   ├── NoBookings.scss
│   │   │   └── NoBookings.stories.js
│   │   ├── NotFound.js
│   │   ├── ScrollToTop.js
│   │   ├── SentryBoundary
│   │   ├── SentryBoundary.js
│   │   ├── ShowBetween
│   │   │   ├── ShowBetween.js
│   │   │   └── ShowBetween.test.js
│   │   ├── mobile-menu.js
│   │   ├── mobile-sub-menu.js
│   │   └── read-more.js
│   ├── fonts
│   │   ├── IF_Std_Bold.ttf
│   │   ├── IF_Std_Bold.woff2
│   │   ├── IF_Std_Light.ttf
│   │   ├── IF_Std_Light.woff2
│   │   ├── IF_Std_Regular.ttf
│   │   └── IF_Std_Regular.woff2
│   ├── images
│   │   ├── backdrop-bluecard.svg
│   │   ├── backdrop-shape.svg
│   │   ├── bottom-right-white-brand-blob.svg
│   │   ├── cancellation.png
│   │   ├── change.png
│   │   ├── checkmark.svg
│   │   ├── chevron-right.svg
│   │   ├── confirmation.png
│   │   ├── email-logo.png
│   │   ├── fr-logo.png
│   │   ├── reminder.png
│   │   └── verification.png
│   ├── sass
│   │   ├── abstracts
│   │   │   ├── _functions.scss
│   │   │   ├── _mixins.scss
│   │   │   └── _variables.scss
│   │   ├── base
│   │   │   ├── _base.scss
│   │   │   ├── _fonts.scss
│   │   │   └── _typography.scss
│   │   ├── components
│   │   │   ├── _blockquote.scss
│   │   │   ├── _call-to-action.scss
│   │   │   ├── _card.scss
│   │   │   ├── _client-detail.scss
│   │   │   ├── _cookie-message.scss
│   │   │   ├── _grid.scss
│   │   │   ├── _icon.scss
│   │   │   ├── _menu-dropdown.scss
│   │   │   ├── _nav.scss
│   │   │   ├── _read-more.scss
│   │   │   ├── _responsive-object.scss
│   │   │   ├── _rich-text.scss
│   │   │   ├── _section.scss
│   │   │   ├── _select-menu.scss
│   │   │   ├── _user-modal.scss
│   │   │   ├── _wrapper.scss
│   │   │   ├── button
│   │   │   │   ├── _button-action.scss
│   │   │   │   ├── _button-rounded.scss
│   │   │   │   ├── _button-slot.scss
│   │   │   │   └── _button.scss
│   │   │   ├── case-load
│   │   │   │   ├── _case-load-header.scss
│   │   │   │   ├── _case-load-table.scss
│   │   │   │   └── _case-load.scss
│   │   │   └── form
│   │   │   ├── _form-checkbox.scss
│   │   │   ├── _form-item.scss
│   │   │   ├── _form-radio.scss
│   │   │   └── _form.scss
│   │   ├── layout
│   │   │   ├── _footer.scss
│   │   │   ├── _header.scss
│   │   │   └── _sidebar.scss
│   │   ├── utilities
│   │   │   └── _utilities.scss
│   │   └── vendor
│   │   └── _normalize.scss
│   └── utils
│   ├── actions.js
│   ├── dates.js
│   ├── dates.test.js
│   ├── delay.js
│   ├── delay.test.js
│   ├── errors.js
│   ├── hooks.js
│   ├── notifications.js
│   ├── phonenumbers.js
│   ├── phonenumbers.test.js
│   ├── storage.js
│   └── storage.test.js
├── store.js
├── stories
│   ├── TemplatePattern.js
│   ├── addons.js
│   ├── config.js
│   ├── middleware.js
│   ├── mocks
│   │   ├── bookings.mock.js
│   │   ├── counsellor-sample-image.jpeg
│   │   ├── counsellors.mock.js
│   │   ├── sample-video.mp4
│   │   └── users.mock.js
│   ├── storyshots.test.js
│   └── webpack.config.js
├── tests
│   ├── assetMock.js
│   ├── environment.js
│   └── setupTests.js
├── user
│   ├── components
│   │   └── UserNav.js
│   ├── user.actions.js
│   ├── user.api.js
│   ├── user.constants.js
│   ├── user.reducer.js
│   └── user.types.js
└── video
├── components
│   ├── AppointmentDetails
│   │   ├── AppointmentDetails.js
│   │   ├── AppointmentDetails.scss
│   │   └── AppointmentDetails.stories.js
│   ├── PreviewPlayer
│   │   ├── PreviewFeed.js
│   │   ├── PreviewPlayer.js
│   │   ├── PreviewPlayer.scss
│   │   └── PreviewPlayer.stories.js
│   ├── SessionStatusForm
│   │   ├── SessionStatusForm.js
│   │   ├── SessionStatusForm.scss
│   │   └── SessionStatusForm.stories.js
│   ├── Timer
│   │   ├── Timer.js
│   │   ├── Timer.scss
│   │   ├── Timer.stories.js
│   │   └── Timer.test.js
│   ├── TwilioVideoPlayer.js
│   ├── Video.js
│   ├── VideoOverlay
│   │   ├── VideoOverlay.js
│   │   └── VideoOverlay.scss
│   ├── VideoPlayer
│   │   ├── VideoPlayer.js
│   │   ├── VideoPlayer.scss
│   │   └── VideoPlayer.stories.js
│   └── VideoRoom
│   ├── ClientVideoRoom.js
│   ├── ClientVideoRoom.stories.js
│   ├── ConfirmEndCall.js
│   ├── ConfirmEndCall.scss
│   ├── CounsellorVideoRoom.js
│   ├── CounsellorVideoRoom.stories.js
│   ├── VideoRoom.js
│   └── VideoRoom.scss
├── video.actions.js
├── video.constants.js
├── video.reducer.js
└── video.routes.js

70 directories, 258 files
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Smaller Create React App + Redux Toolkit project:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;src/
├── main.entry.tsx
├── main.entry.scss
├── nav
│   ├── components
│   │   ├── NavBar
│   │   │   ├── Logo.svg
│   │   │   ├── NavBar.stories.tsx
│   │   │   └── NavBar.tsx
│   │   └── PrimaryNav
│   │       ├── PrimaryCategory.tsx
│   │       ├── PrimaryNav.stories.tsx
│   │       ├── PrimaryNav.test.tsx
│   │       └── PrimaryNav.tsx
│   ├── nav.data.ts
│   ├── nav.slice.ts
│   └── nav.types.ts
├── shared
│   ├── components
│   │   ├── App
│   │   │   ├── App.test.tsx
│   │   │   ├── App.tsx
│   │   │   └── Dashboard.tsx
│   │   ├── Button
│   │   │   ├── Button.stories.tsx
│   │   │   └── Button.tsx
│   │   └── Release
│   │       ├── Release.module.scss
│   │       ├── Release.test.tsx
│   │       └── Release.tsx
│   ├── shared.constants.ts
│   ├── store.ts
│   └── styles
│       └── theme.ts
└── user
    ├── components
    │   └── AccountInfo
    │       ├── AccountInfo.stories.tsx
    │       ├── AccountInfo.test.tsx
    │       └── AccountInfo.tsx
    ├── user.data.ts
    ├── user.slice.ts
    └── user.types.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.danawoodman.com/articles/organizing-react-projects&quot;&gt;How I Organize React Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">I’ve spent a lot of time thinking of how best to structure React projects over the last few years. This is especially important when React is a central part of the project’s front-end tech stack, as React in itself has very few opinions about how to organize code (it’s a library, not a framework). Here are my notes.</summary></entry><entry><title type="html">React training goals for front-end developers</title><link href="https://thib.me/react-training-goals-for-front-end-developers" rel="alternate" type="text/html" title="React training goals for front-end developers" /><published>2020-04-17T18:21:48+00:00</published><updated>2020-04-17T18:21:48+00:00</updated><id>https://thib.me/react-training-goals-for-front-end-developers</id><content type="html" xml:base="https://thib.me/react-training-goals-for-front-end-developers">&lt;p&gt;Here are my thoughts on what front-end developers should focus on when learning React. There are a lot of resources on there – this is more about identifying what exactly you should spend time on, and in what order, for people who are already well versed in building UIs with HTML, CSS, and a sprinkle of JavaScript.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;1-ui-development-fundamentals&quot;&gt;#1 UI development fundamentals&lt;/h2&gt;

&lt;h3 id=&quot;javascript-fundamentals&quot;&gt;JavaScript fundamentals&lt;/h3&gt;

&lt;p&gt;No matter what you do with React, you’ll be more productive if you know your way around ES6, functional programming, DOM APIs.&lt;/p&gt;

&lt;p&gt;To do this in any kind of professional environment you also need to know about supporting tooling, which is central to modern JS development – Node and npm, unit tests in JS (with Jest), Babel, Webpack. Prettier. ESLint.&lt;/p&gt;

&lt;p&gt;TypeScript is a plus on all of the above, and is gradually becoming the de-facto standard for non-trivial codebases, but for now I wouldn’t call it a “fundamental”.&lt;/p&gt;

&lt;p&gt;There are a lot of resources to learn all of the above. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript&quot;&gt;MDN has a good overview of modern JavaScript&lt;/a&gt;. I would highly recommend taking a course on &lt;strong&gt;functional programming with JS&lt;/strong&gt;, since this is an area where it’s important to understand the theory. I would also recommend reading through &lt;a href=&quot;https://github.com/airbnb/javascript&quot;&gt;Airbnb’s JS styleguide&lt;/a&gt;, and the corresponding ESLint config. It’s very long, but reading it all and understanding it all is the best way to test the depths of your knowledge. I wouldn’t worry too much about learning tooling beyond hands-on experience on projects – these days, for React in particular, Create React App does most of this for you.&lt;/p&gt;

&lt;h3 id=&quot;front-end-development&quot;&gt;Front-end development&lt;/h3&gt;

&lt;p&gt;I’m not entirely sure this needs to be stated but React is mainly used for UI development, so to be proficient you need a good understanding of browsers and front-end web technologies like HTML / CSS / SVG, as well as UI dev considerations like reusable layouts vs one-off components, accessibility, performance, etc.&lt;/p&gt;

&lt;p&gt;I don’t think this is too important for me to develop further so will stop there. One thing to note is that quite a lot of advanced React development is done with a CSS-in-JS approach as opposed to a more traditional “CSS preprocessor” – but I think you can go quite far without knowing anything about this.&lt;/p&gt;

&lt;h3 id=&quot;react-apis-and-common-third-party-libraries&quot;&gt;React APIs and common third-party libraries&lt;/h3&gt;

&lt;p&gt;Building upon the fundamentals, you of course need to know a fair bit about React itself to be proficient with it. To me, knowing React as a front-end developer starts with understanding its component-driven paradigm, JSX, props, state, (basic) hooks, and the component lifecycle. How to do forms with React. Knowing things like PropTypes also helps, as well as usage of popular libraries from the React ecosystem like classnames, react-modal, formik.&lt;/p&gt;

&lt;p&gt;It’s also important to know about tooling for all of this – ESLint rules for React, and unit tests for React components. Storybook and similar tools are also much more prevalent these days.&lt;/p&gt;

&lt;p&gt;There are a lot of courses on this, which generally also cover more advanced topics.&lt;/p&gt;

&lt;h2 id=&quot;2-single-page-app-builds&quot;&gt;#2 Single-page-app builds&lt;/h2&gt;

&lt;p&gt;All of the above should cover enough bases to be proficient building UI components with React. Now there’s quite a big gap from UI components development, to creating the architecture of a whole app / site around React. “React” is quite a small library, but generally when we talk about a”React build” we also encompass a lot of other aspects of client-side app development that don’t have that much to do with React itself.&lt;/p&gt;

&lt;h3 id=&quot;api-integrations&quot;&gt;API integrations&lt;/h3&gt;

&lt;p&gt;Generally we use React for UIs that are (much) more dynamic than a CMS-driven web page, where React’s client-rendered nature excels. However, in order to display any UI at all – we need to load the correct data for the app. Generally for us this means integrating with a REST(ish) API over JSON, served by a Django back-end. To be proficient here one needs to have a fair amount of knowledge about APIs, serialisation, HTTP, network constraints, error handling. Practical knowledge of the corresponding browser DevTools is also a must, and related development tools (curl, Swagger, Postman) helps a lot too. This work is generally about integrating with a Django back-end, and the skills needed here were historically used most for back-end development on the web / general programming (e.g. scripting) outside of web development. So some basic back-end development skill, or programming skills outside of the browser, will help a lot.&lt;/p&gt;

&lt;p&gt;This isn’t really specific to React but generally falls within the “React development” umbrella nonetheless. Learning this would generally be covered in any full-stack React dev course. For example a MEAN stack tutorial, or &lt;a href=&quot;https://github.com/gothinkster/realworld&quot;&gt;RealWorld App&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-management&quot;&gt;Data management&lt;/h3&gt;

&lt;p&gt;Dynamic UIs generally have a lot of data to manipulate, whether that’s app state from interactions, or data that was loaded. Here some knowledge of data manipulation is important – functional programming, algorithmic complexity, normalisation. Back-end skills also help a lot since generally this work would have happened server-side for more traditional web apps. In our React stack, data management is done with Redux so any knowledge of it (or Flux, its predecessor) also helps a lot. As well as knowledge of React’s Context API.&lt;/p&gt;

&lt;p&gt;Out of all skills that tend to fall under the “React” umbrella these are probably the ones that are hardest to train. Things like &lt;a href=&quot;https://redux-starter-kit.js.org/&quot;&gt;Redux Toolkit&lt;/a&gt; help a lot, which provide more framework-like opinions. There are a lot of good resources for Redux (for example the official &lt;a href=&quot;https://redux.js.org/style-guide/style-guide&quot;&gt;Redux styleguide&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;single-page-app-considerations&quot;&gt;Single-page app considerations&lt;/h3&gt;

&lt;p&gt;Beyond data management, architecting a React app generally also requires knowledge of “single-page apps” (PWAs). This roughly means being aware of the corresponding DOM / browser APIs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client-side routing with HTML5 history and the React-specific routing libraries (react-router, Reach router)&lt;/li&gt;
  &lt;li&gt;Data storage with HTML5 storage backends (localstorage, indexeddb, etc)&lt;/li&gt;
  &lt;li&gt;(Service workers – although that feels quite advanced)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This isn’t relevant on all projects but generally falls within the React sphere where appropriate. There are good learning resources for this in the React world.&lt;/p&gt;

&lt;h2 id=&quot;3-other-advanced-topics&quot;&gt;#3 Other advanced topics&lt;/h2&gt;

&lt;p&gt;There are a few other topics that are worth mentioning but I would not classify as fundamentals. In no particular order,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TypeScript. Knowledge about type systems in general also helps.&lt;/li&gt;
  &lt;li&gt;CSS-in-JS. Particularly styled-components.&lt;/li&gt;
  &lt;li&gt;Server-side rendering.&lt;/li&gt;
  &lt;li&gt;Animations with React. I would like this to not be an advanced topic, but realistically it is.&lt;/li&gt;
  &lt;li&gt;Integration with other libraries, e.g. D3&lt;/li&gt;
  &lt;li&gt;The Context API&lt;/li&gt;
  &lt;li&gt;Advanced React hooks / custom hooks&lt;/li&gt;
  &lt;li&gt;Error monitoring for client-side code. With Sentry for example.&lt;/li&gt;
  &lt;li&gt;GraphQL. Most likely with Gatsby for us. Otherwise Apollo.&lt;/li&gt;
  &lt;li&gt;“Meta-frameworks” like Next / Gatsby&lt;/li&gt;
  &lt;li&gt;Code splitting&lt;/li&gt;
  &lt;li&gt;ES6 modules&lt;/li&gt;
  &lt;li&gt;Third-party components selection&lt;/li&gt;
  &lt;li&gt;(React Native)&lt;/li&gt;
  &lt;li&gt;Publishing React components for reuse on npm&lt;/li&gt;
  &lt;li&gt;Design systems with React&lt;/li&gt;
  &lt;li&gt;Enzyme and snapshot tests for unit tests for React components&lt;/li&gt;
  &lt;li&gt;Async/await&lt;/li&gt;
  &lt;li&gt;Authentication and security-related concepts – CORS, SSO, CSRF, JWTs, same-origin policies, CSP&lt;/li&gt;
  &lt;li&gt;React performance – virtual DOM, memoization&lt;/li&gt;
  &lt;li&gt;Error boundaries&lt;/li&gt;
  &lt;li&gt;Higher-order components&lt;/li&gt;
  &lt;li&gt;React Suspense&lt;/li&gt;
  &lt;li&gt;React’s Strict mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last but not least – React app architecture is worth a line item in here, although I wouldn’t know where to put it. For React apps this means things like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deciding where and how to do API integrations, and related auxiliary data management – error handling, loading states&lt;/li&gt;
  &lt;li&gt;Making components that are reusable, since that’s React’s strength&lt;/li&gt;
  &lt;li&gt;Using a code structure that works – “app” folders like Django or file type folders, with what naming conventions&lt;/li&gt;
  &lt;li&gt;Deciding how to do code splitting – app level, route level, component level&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Here are my thoughts on what front-end developers should focus on when learning React. There are a lot of resources on there – this is more about identifying what exactly you should spend time on, and in what order, for people who are already well versed in building UIs with HTML, CSS, and a sprinkle of JavaScript.</summary></entry></feed>