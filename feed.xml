<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://thib.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://thib.me/" rel="alternate" type="text/html" /><updated>2021-05-13T06:47:48+00:00</updated><id>https://thib.me/feed.xml</id><title type="html">Thibaud’s blog</title><subtitle>Logbook of a software engineer navigating web development</subtitle><author><name>Thibaud Colas</name></author><entry><title type="html">PyCon US 2021: Web Accessibility ♥ Python</title><link href="https://thib.me/pycon-us-2021-python-accessibility-ftw" rel="alternate" type="text/html" title="PyCon US 2021: Web Accessibility ♥ Python" /><published>2021-05-13T06:43:49+00:00</published><updated>2021-05-13T06:43:49+00:00</updated><id>https://thib.me/pycon-us-2021-python-accessibility-ftw</id><content type="html" xml:base="https://thib.me/pycon-us-2021-python-accessibility-ftw">&lt;p&gt;Presentation at PyCon US 2021.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;Demo site: &lt;a href=&quot;https://accessibility-loves-python.vercel.app/&quot;&gt;accessibility-loves-python.vercel.app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Presentation at PyCon US 2021.</summary></entry><entry><title type="html">PyCon US 2021: Building accessibility into open-source projects</title><link href="https://thib.me/pycon-us-2021-building-accessibility-into-open-source-projects" rel="alternate" type="text/html" title="PyCon US 2021: Building accessibility into open-source projects" /><published>2021-05-09T15:03:21+00:00</published><updated>2021-05-09T15:03:21+00:00</updated><id>https://thib.me/pycon-us-2021-building-accessibility-into-open-source-projects</id><content type="html" xml:base="https://thib.me/pycon-us-2021-building-accessibility-into-open-source-projects">&lt;p&gt;This is a lightning talk I gave at PyCon US 2021’s &lt;a href=&quot;https://us.pycon.org/2021/summits/maintainers/&quot;&gt;Maintainers Summit&lt;/a&gt;, intended for an audience of project maintainers / open-source contributors.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Video:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/9XI-8ZvU2w0&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Slides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1qjHKEWoExYY-fG4qbRBQP_EN5fxs_8z7csVIpy9bWlg/edit&quot;&gt;Google Slides: PyCon US 2021 - Building accessibility into open-source projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/1hN554kNicuEvBcWK_VsiRazBTfbBGt6X/view&quot;&gt;PDF: PyCon US 2021 - Building accessibility into open-source projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;transcript&quot;&gt;Transcript&lt;/h2&gt;

&lt;p&gt;Hi PyCon, thanks for having me, I’m Thibaud my pronouns are he/him and I’m a developer at Torchbox in the UK.&lt;/p&gt;

&lt;p&gt;Today I’m here to talk to you about building accessibility into open source projects, and in particular coming to you with our learnings from Wagtail; I’m a core developer of this CMS called Wagtail built on Python and Django and I also contribute to Django’s accessibility team so I’m here to share with you the learnings from those two projects.&lt;/p&gt;

&lt;h3 id=&quot;a-wagtail-story&quot;&gt;A Wagtail story&lt;/h3&gt;

&lt;p&gt;So Wagtail is a CMS that people use to build websites.&lt;/p&gt;

&lt;h4 id=&quot;why-accessibility-matters-to-us&quot;&gt;Why accessibility matters to us&lt;/h4&gt;

&lt;p&gt;When it comes to why we care about accessibility there are essentially two reasons.&lt;/p&gt;

&lt;p&gt;One of them is we want the Wagtail admin to be accessible to as many people as possible and the other is we want the sites actually built with Wagtail to be as accessible as possible so these are the two main reasons for end users.&lt;/p&gt;

&lt;h4 id=&quot;other-reasons-to-care&quot;&gt;Other reasons to care&lt;/h4&gt;

&lt;p&gt;And then as a project there are definitely a few more reasons – the big one is legislation and procurement our clients and people who pick Wagtail as a CMS definitely have very specific expectations from projects and they would pick one or the other based on requirements like this.
so yeah there is legislation in the US, in the EU, and really all around the world it’s not just those two countries.&lt;/p&gt;

&lt;p&gt;One thing we do have going for ourselves is that all of those laws are based on the same standard called WCAG 2.1, the AA level being the most recent and widespread version of it.&lt;/p&gt;

&lt;h4 id=&quot;its-not-just-wagtail&quot;&gt;It’s not just Wagtail&lt;/h4&gt;

&lt;p&gt;And yeah it’s not just Wagtail obviously it’s not just CMSes, all types of online tools, apps, sites we build have to follow those same standards.&lt;/p&gt;

&lt;p&gt;And really as developers I want to make the points that this isn’t just those projects it’s also the building blocks of those projects, the frameworks, the database modeling, the development tools, even the READMEs have to follow those same standards.&lt;/p&gt;

&lt;p&gt;But yeah I don’t want this to be too negative either, so let’s look at some practical examples of where accessibility matters in the Python ecosystem in particular.&lt;/p&gt;

&lt;h3 id=&quot;where-accessibility-matters&quot;&gt;Where accessibility matters&lt;/h3&gt;

&lt;p&gt;I went through the &lt;a href=&quot;https://hugovk.github.io/top-pypi-packages/&quot;&gt;top 1000 Python packages on PyPI&lt;/a&gt; and thought I’d pick a few examples of where you might not think of accessibility but actually there are very clear considerations to be had.&lt;/p&gt;

&lt;h4 id=&quot;data-science&quot;&gt;Data science&lt;/h4&gt;

&lt;p&gt;So the first one is data science, and alt text for dataviz.&lt;/p&gt;

&lt;p&gt;As part of studying data you will very likely have to visualise it at some point and that might include producing images that you do want to be accessible to people who can’t actually see the visuals.&lt;/p&gt;

&lt;p&gt;Of course they might not get the whole interactivity and interaction that might not be the point of your exercise but just having some form of alternative text would be useful.&lt;/p&gt;

&lt;h4 id=&quot;data-science-example-alt-text&quot;&gt;Data science example: alt text&lt;/h4&gt;

&lt;p&gt;So this example in particular, that comes from Matplotlib and the alt text they have defined in their example basically just restates the caption at the top of the chart.&lt;/p&gt;

&lt;p&gt;Which is, well, definitely better than nothing, but to the right I have an example of what it might look like for you to consider actually going through the whole data for people who can’t see the visuals.&lt;/p&gt;

&lt;p&gt;And yeah not saying this is always appropriate again but definitely something to consider and if you happen to work with one of those dataviz projects it’s important I think for this to be considered in the docs in the actual framework of how you create the visualizations, and yeah just making sure that this is taken into account.&lt;/p&gt;

&lt;h4 id=&quot;web-development&quot;&gt;Web development&lt;/h4&gt;

&lt;p&gt;Another important part of the Python ecosystem is web development with big frameworks that I’m sure you all have heard of before, and templating languages, and here as well, basically even though those frameworks might not always be very opinionated about HTML they do have for example code snippets in their docs that really should take accessibility into account.&lt;/p&gt;

&lt;p&gt;So it’s very common for me to look at those documentation code snippets and see very basic HTML issues.&lt;/p&gt;

&lt;h4 id=&quot;web-development-examples-html-bad-practices&quot;&gt;Web development examples: HTML bad practices&lt;/h4&gt;

&lt;p&gt;So for example to the left here this is missing a “lang” attribute on the HTML tag.&lt;/p&gt;

&lt;h4 id=&quot;pdf-generation&quot;&gt;PDF generation&lt;/h4&gt;

&lt;p&gt;And here a third topic in Python in particular is PDF generation, there are lots of those projects out there and something that people might overlook is that even though the source for those PDFs is HTML, the PDF itself might not be structured at all and it might not be usable by people with screen readers, so the key feature here that I have to look for is called “tagged PDFs” and it’s a requirement that very few of those projects actually have.&lt;/p&gt;

&lt;p&gt;Yeah I’m trying my best not to have this be too negative, so just to finish on a more positive note I wanted to showcase different ways you could foster those accessibility contributions on your own projects.&lt;/p&gt;

&lt;h3 id=&quot;fostering-contributions&quot;&gt;Fostering contributions&lt;/h3&gt;

&lt;h4 id=&quot;define-your-target&quot;&gt;Define your target&lt;/h4&gt;

&lt;p&gt;The first thing to do is obviously to pick a target for what you support.&lt;/p&gt;

&lt;p&gt;WCAG 2.1 at the AA level being the obvious thing to start from, and just not stop at picking the target but actually documenting it and documenting practical code review and testing steps, I think it’s very important.&lt;/p&gt;

&lt;p&gt;I have added a few examples of this should you want to look into this further.&lt;/p&gt;

&lt;h4 id=&quot;leverage-automated-tools&quot;&gt;Leverage automated tools&lt;/h4&gt;

&lt;p&gt;And yeah now that you have this target actually doing some testing, there are lots of great automated tools out there they won’t find all of the issues but they definitely find plenty enough to get going with so I’d highly recommend looking into this.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.deque.com/axe/&quot;&gt;Axe&lt;/a&gt; – Accessibility rules engine with support for WCAG &amp;amp; Section 508&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://accessibilityinsights.io/docs/en/web/overview&quot;&gt;Accessibility Insights&lt;/a&gt; – Browser extension with Axe and more&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pa11y.org/&quot;&gt;Pa11y&lt;/a&gt; – Command line tool for accessibility checks with Axe &amp;amp; HTML_CS&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evcohen/eslint-plugin-jsx-a11y&quot;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;, &lt;a href=&quot;https://github.com/maranran/eslint-plugin-vue-a11y&quot;&gt;eslint-plugin-vue-a11y&lt;/a&gt;, &lt;a href=&quot;https://github.com/YozhikM/stylelint-a11y&quot;&gt;stylelint-a11y&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;leverage-automated-tools-django-example&quot;&gt;Leverage automated tools: Django example&lt;/h4&gt;

&lt;p&gt;And this is an example from Django in particular where we have this very big report that takes screenshots and logs all of the accessibility issues for different parts of the Django admin and you can just look at this and get a sense of a snapshot of how Django itself is doing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pa11y example: &lt;a href=&quot;https://github.com/thibaudcolas/django_admin_tests&quot;&gt;github.com / thibaudcolas / django_admin_tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;manual-audits&quot;&gt;Manual audits&lt;/h4&gt;

&lt;p&gt;And back on the Wagtail side we tend to invest more into manual audits just because we have the expertise to do this so these are definitely much more complex to put together and I won’t be talking about this much further but if you’re interested I can definitely talk to that a bit more.&lt;/p&gt;

&lt;h4 id=&quot;for-larger-projects-have-an-accessibility-team&quot;&gt;For larger projects: have an accessibility team&lt;/h4&gt;

&lt;p&gt;And yes for larger projects I definitely recommend having a dedicated team for this of subject matter experts so we have the example of the Wagtail team here but yeah for example Jupyter notebooks as well do have a team like this that looks after the accessibility of the actual notebooks which as they are used in classroom environments is very important.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wagtail.io/blog/accessibility-team-reloaded/&quot;&gt;Wagtail’s team&lt;/a&gt; = 5 people committed for 6 months. Thank you Storm, Jesse, Kyle, Scott!&lt;/p&gt;

&lt;h3 id=&quot;open-source-can-lead-the-way&quot;&gt;Open-source can lead the way&lt;/h3&gt;

&lt;p&gt;So the last point I want to make really is that there are a few areas in software development like security for example where open source leads the way and shows us how it’s meant to be done basically, and I really think accessibility could be one of those areas, it really is something that matters on all projects no matter their size, and yeah that matters to a huge number of people that developers often underestimate just the sheer size of the people who can benefit from this, and yes there are well-defined standards and readily-available tools.&lt;/p&gt;

&lt;h3 id=&quot;thank-you-️&quot;&gt;Thank you! ❤️&lt;/h3&gt;

&lt;p&gt;Thank you I hope you enjoyed this and I’ll definitely be available later on to answer any questions.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">This is a lightning talk I gave at PyCon US 2021’s Maintainers Summit, intended for an audience of project maintainers / open-source contributors.</summary></entry><entry><title type="html">Curlylint: Quality-of-life improvements</title><link href="https://thib.me/curlylint-quality-of-life-improvements" rel="alternate" type="text/html" title="Curlylint: Quality-of-life improvements" /><published>2021-04-25T09:22:49+00:00</published><updated>2021-04-25T09:22:49+00:00</updated><id>https://thib.me/curlylint-quality-of-life-improvements</id><content type="html" xml:base="https://thib.me/curlylint-quality-of-life-improvements">&lt;p&gt;Curlylint v0.13.0 is out. It’s a relatively minor release, but comes with a few nice-to-haves for users, and a lot of behind-the-scenes project changes.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;modern-python-support&quot;&gt;Modern Python support&lt;/h2&gt;

&lt;p&gt;Curlylint now officially supports Python 3.9, and (tentatively) Python 3.10, based on the 6th alpha release. From now on, you can expect support for all Python versions &lt;a href=&quot;https://devguide.python.org/#status-of-python-branches&quot;&gt;actively supported by CPython maintainers&lt;/a&gt;. In the future, this will also mean actively removing support for Python versions that reach their scheduled end-of-life.&lt;/p&gt;

&lt;h2 id=&quot;removed-extras-for-development-dependencies&quot;&gt;Removed extras for development dependencies&lt;/h2&gt;

&lt;p&gt;Python packaging is very messy. I’ve recently started using the &lt;a href=&quot;https://python-poetry.org/&quot;&gt;Poetry&lt;/a&gt; package manager at work, primarily for the benefit of having lockfiles to pin transitive dependencies on application-style projects (a must, in my opinion). Here is an excerpt of what installing curlylint looks like in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry.lock&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[[package]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;curlylint&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.12.2&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; Experimental HTML templates linting for Jinja, Nunjucks, Django templates, Twig, Liquid&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;python-versions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=3.6&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[package.dependencies]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=17.2.0&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=6.5&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;dataclasses&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;{version = &quot;&amp;gt;=0.6&quot;, markers = &quot;python_version &amp;lt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;}
parsy = &quot;1.1.0&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pathspec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=0.6,&amp;lt;1&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;toml&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;=0.9.4&quot;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[package.extras]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;[&quot;black (==19.10b0)&quot;, &quot;flake8 (==3.8.4)&quot;, &quot;mypy (==0.812)&quot;, &quot;pytest (==6.2.2)&quot;, &quot;coverage (==5.4)&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I find this last line very puzzling – there really should be no need for dependencies intended only for development to be visible in the published package. I don’t want curlylint’s development dependencies changing from release to release to cause noise in upgrade diffs, hence why the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev&lt;/code&gt; extra has been removed.&lt;/p&gt;

&lt;p&gt;It’s worth saying Poetry has otherwise been a pleasure to work with, with only a few minor inconveniences like this one. I would happily recommend it to people wanting more out of their Python package management.&lt;/p&gt;

&lt;h2 id=&quot;new---template-tags-cli-flag&quot;&gt;New &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--template-tags&lt;/code&gt; CLI flag&lt;/h2&gt;

&lt;p&gt;As the &lt;a href=&quot;https://www.curlylint.org/docs/command-line-usage#--template-tags&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--template-tags&lt;/code&gt; documentation&lt;/a&gt; now states, this makes Curlylint aware of custom tags used in templates, so the parser can understand they contain HTML content to go through.&lt;/p&gt;

&lt;p&gt;This option was previously only available via a TOML configuration file, via the (now deprecated) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jinja-custom-elements-names&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jinja_custom_elements_names&lt;/code&gt; setting. The new setting works the same, but can also be set via CLI flags.&lt;/p&gt;

&lt;h2 id=&quot;behind-the-scenes-changes&quot;&gt;Behind-the-scenes changes&lt;/h2&gt;

&lt;p&gt;There really is only one I want to highlight – improvements to Curlylint’s test suite, which have resulted in a &lt;a href=&quot;https://coveralls.io/github/thibaudcolas/curlylint?branch=main&quot;&gt;14% increase in test coverage&lt;/a&gt;. While test coverage percentages generally don’t mean much, in this case this means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The command line interface now has unit tests. While relatively basic in the current iteration, they should be very easy to add to.&lt;/li&gt;
  &lt;li&gt;The parser has more unit tests, and they are now in line with the rest of the test suite.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://coveralls.io/github/thibaudcolas/curlylint&quot;&gt;&lt;img src=&quot;/images/blog/curlylint-quality-of-life-improvements/coverage-over-time.png&quot; alt=&quot;Screen capture of the Coveralls coverage score over time as an area chart, from 59% in early March to 74% now&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://coveralls.io/&quot;&gt;Coveralls&lt;/a&gt; shows coverage increasing from 59.39% in early March to 74% in late April.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having comprehensive unit tests really matters to me as a maintainer, and from now on it should be much more realistic to expect all changes to the project to come with corresponding unit tests.&lt;/p&gt;

&lt;h2 id=&quot;up-next&quot;&gt;Up next&lt;/h2&gt;

&lt;p&gt;There are a lot of &lt;a href=&quot;https://github.com/thibaudcolas/curlylint/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc+label%3Aparser&quot;&gt;parser bugs&lt;/a&gt; I will now feel much more comfortable approaching, due to having a way to easily write tests for them.&lt;/p&gt;

&lt;p&gt;Short-term, I want to make sure to get to all of the open pull request, hopefully fully clearing the backlog. I can see people are responding very well to Curlylint despite its experimental nature, and are eager to help making it more useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thibaudcolas/curlylint/pull/53&quot;&gt;#53 Optional HTML container parsing for if-else-endif type code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thibaudcolas/curlylint/pull/75&quot;&gt;#75 Add test for unresolved missing alt attribute inside django block (#72)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/thibaudcolas/curlylint/pull/76&quot;&gt;#76 Use types_or directive for hook instead of files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For me, the most immediate next step will be presenting Curlylint at &lt;a href=&quot;https://us.pycon.org/2021/&quot;&gt;PyCon US 2021&lt;/a&gt;! I hope to get critical feedback on the tool, and am also working on an “online playground” version to try lint templates without installing anything, we should make it simpler for people to try out the linter.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Curlylint v0.13.0 is out. It’s a relatively minor release, but comes with a few nice-to-haves for users, and a lot of behind-the-scenes project changes.</summary></entry><entry><title type="html">2021 web conferences accepting talks</title><link href="https://thib.me/2021-web-conferences-accepting-talks" rel="alternate" type="text/html" title="2021 web conferences accepting talks" /><published>2021-03-04T07:42:03+00:00</published><updated>2021-03-04T07:42:03+00:00</updated><id>https://thib.me/2021-web-conferences-accepting-talks</id><content type="html" xml:base="https://thib.me/2021-web-conferences-accepting-talks">&lt;p&gt;Here is a small list of conferences I put together for 2021, as I was looking for speaking opportunities, with a particular focus on Europe and America. Hope this helps!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;djangocon-eu-2021&quot;&gt;DjangoCon EU 2021&lt;/h2&gt;

&lt;p&gt;02-06 June 2021, remote. &lt;a href=&quot;https://2021.djangocon.eu/talks/cfp/&quot;&gt;CFP under way&lt;/a&gt;, ending 2020-04-01 23h59 UTC.&lt;/p&gt;

&lt;p&gt;Also &lt;a href=&quot;https://www.djangoproject.com/weblog/2021/feb/16/djangocon-europe-2021-announcement/&quot;&gt;looking for volunteers&lt;/a&gt; to help organise &amp;amp; run the event.&lt;/p&gt;

&lt;h2 id=&quot;jsconf-budapest-2021&quot;&gt;JSConf Budapest 2021&lt;/h2&gt;

&lt;p&gt;23-24 September 2021, Budapest. &lt;a href=&quot;https://jsconfbp.com/call-for-speakers-2021/&quot;&gt;CFP under way&lt;/a&gt;, ending March 31th 2021.&lt;/p&gt;

&lt;h2 id=&quot;djangocon-us-2021&quot;&gt;DjangoCon US 2021&lt;/h2&gt;

&lt;p&gt;October 2021, remote. &lt;a href=&quot;https://2021.djangocon.us/&quot;&gt;No CFP announced yet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pycon-uk-2021&quot;&gt;PyCon UK 2021&lt;/h2&gt;

&lt;p&gt;No date announced except for “2021”. Cardiff. &lt;a href=&quot;https://2020.pyconuk.org/&quot;&gt;No CFP announced yet&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;nordic-js-2021&quot;&gt;Nordic JS 2021&lt;/h2&gt;

&lt;p&gt;October 2021, Stockholm. &lt;a href=&quot;https://nordicjs.com/call-for-speakers&quot;&gt;CFP under way&lt;/a&gt;, no deadline.&lt;/p&gt;

&lt;h2 id=&quot;mixit&quot;&gt;MiXiT&lt;/h2&gt;

&lt;p&gt;18-20 May 2021, Lyon, France. Looks like there might not be &lt;a href=&quot;https://mixitconf.org/&quot;&gt;any CFP this year&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;halfstack-london-2021&quot;&gt;HalfStack London 2021&lt;/h2&gt;

&lt;p&gt;November 2021, London. &lt;a href=&quot;https://halfstackconf.com/london/&quot;&gt;CFP under way&lt;/a&gt;, no deadline.&lt;/p&gt;

&lt;h2 id=&quot;halfstack-phoenix-2022&quot;&gt;HalfStack Phoenix 2022&lt;/h2&gt;

&lt;p&gt;January 2022, Phoenix. &lt;a href=&quot;https://halfstackconf.com/phoenix/&quot;&gt;CFP under way&lt;/a&gt;, ending 15/09/2021.&lt;/p&gt;

&lt;h2 id=&quot;halfstack-newquay-2022&quot;&gt;HalfStack Newquay 2022&lt;/h2&gt;

&lt;p&gt;July 2022, Newquay (/ˈnjuːki/) (UK). &lt;a href=&quot;https://halfstackconf.com/newquay/&quot;&gt;CFP under way&lt;/a&gt;, no deadline.&lt;/p&gt;

&lt;h2 id=&quot;halfstack-new-york-2022&quot;&gt;HalfStack New York 2022&lt;/h2&gt;

&lt;p&gt;August 2022, New York. &lt;a href=&quot;https://halfstackconf.com/newyork/&quot;&gt;CFP under way&lt;/a&gt;, ending 30/04/2022.&lt;/p&gt;

&lt;h2 id=&quot;halfstack-vienna-2022&quot;&gt;HalfStack Vienna 2022&lt;/h2&gt;

&lt;p&gt;September 2022, Vienna. &lt;a href=&quot;https://halfstackconf.com/vienna/&quot;&gt;CFP under way&lt;/a&gt;, ending 31/05/2022.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Here is a small list of conferences I put together for 2021, as I was looking for speaking opportunities, with a particular focus on Europe and America. Hope this helps!</summary></entry><entry><title type="html">Accessibility team reloaded</title><link href="https://thib.me/wagtail-accessibility-team-reloaded" rel="alternate" type="text/html" title="Accessibility team reloaded" /><published>2021-02-24T07:42:03+00:00</published><updated>2021-02-24T07:42:03+00:00</updated><id>https://thib.me/wagtail-accessibility-team-reloaded</id><content type="html" xml:base="https://thib.me/wagtail-accessibility-team-reloaded">&lt;p&gt;After &lt;a href=&quot;https://wagtail.io/blog/announcing-wagtail-sub-teams/&quot;&gt;6 months of operations&lt;/a&gt;, we reflect on the progress our &lt;a href=&quot;https://github.com/wagtail/wagtail/wiki/Wagtail-sub-teams#accessibility&quot;&gt;accessibility team&lt;/a&gt; has made, and go on the lookout for new contributors.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;progress-to-date&quot;&gt;Progress to date&lt;/h2&gt;

&lt;p&gt;Early on, &lt;a href=&quot;https://github.com/wagtail/wagtail/wiki/Accessibility-team#2020-07-17&quot;&gt;we chose&lt;/a&gt; to give priority to improvements we could make to sites built with Wagtail, rather than the Wagtail admin. Practically, this meant:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Putting together &lt;a href=&quot;https://docs.wagtail.io/en/latest/advanced_topics/accessibility_considerations.html&quot;&gt;Wagtail’s accessibility considerations documentation&lt;/a&gt;, as most of the accessibility issues we identified were either dependent on how Wagtail is used, or could be worked around by implementers.&lt;/li&gt;
  &lt;li&gt;From this list, we also created a &lt;a href=&quot;https://github.com/wagtail/wagtail/projects/10&quot;&gt;backlog of known accessibility issues&lt;/a&gt;, which we would then proceed to fixing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along the way, we also kept working on the &lt;a href=&quot;https://github.com/wagtail/wagtail/issues/6107&quot;&gt;SVG icons&lt;/a&gt; refactoring for the admin, bit by bit.&lt;/p&gt;

&lt;h2 id=&quot;team-operations&quot;&gt;Team operations&lt;/h2&gt;

&lt;p&gt;We ran a short &lt;a href=&quot;https://github.com/wagtail/wagtail/wiki/Accessibility-team#2021-01-22----team-retrospective&quot;&gt;retrospective&lt;/a&gt; to reflect on the team’s way of working over the last 6 months.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There were a total of 5 people involved at some point over the 6 months (Scott, Andreas, Nick, Helen, and Thibaud), but only 2 people attended each meeting on average. Not as much as we’d ideally want to.&lt;/li&gt;
  &lt;li&gt;We met 9 times, for 30min each, scheduled once every two weeks.&lt;/li&gt;
  &lt;li&gt;Overall we’re happy with what we’ve achieved and how the team works.&lt;/li&gt;
  &lt;li&gt;We were keen to do more automated tests and manual auditing but didn’t get around to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;There are a few changes we will want to see over the next 6-month tenure of the team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We’ll want to do a new, comprehensive accessibility audit of Wagtail&lt;/strong&gt;, either for WCAG 2.2 AA or ATAG 2.0. We want to have a clear, public record of how we’re doing.&lt;/p&gt;

&lt;p&gt;We’ll review our contribution guidelines &lt;strong&gt;so accessibility is part and parcel of making changes to Wagtail&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And we’ll also investigate having &lt;strong&gt;automated accessibility tests built into Wagtail&lt;/strong&gt;. &lt;a href=&quot;https://github.com/neon-jungle/wagtail-accessibility&quot;&gt;wagtail-accessibility&lt;/a&gt; is one of the most popular third-party packages out there, and we want to double down on having this be one of Wagtail’s strengths.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;we-also-want-to-involve-more-people&quot;&gt;We also want to involve more people&lt;/h3&gt;

&lt;p&gt;There’s only so much we can do with two to three of us actively involved – ideally we’d want a team twice that size! All are welcome regardless of skill level or background, and the time commitment is very reasonable. We’re particularly keen to work with people who:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Have personal experience of access and functional needs, or who are regular users of assistive technologies.&lt;/li&gt;
  &lt;li&gt;Work on User Experience, design, or content – and can help us understand the needs of our users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course web developers who want to have a practical impact on making the web more accessible!&lt;/p&gt;

&lt;p&gt;Does this sound like your kind of jam? If you’re keen to learn more, &lt;a href=&quot;https://github.com/wagtail/wagtail/wiki/Slack&quot;&gt;reach out to us on Slack&lt;/a&gt; in #accessibility.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">After 6 months of operations, we reflect on the progress our accessibility team has made, and go on the lookout for new contributors.</summary></entry><entry><title type="html">Pattern Lab goes Django</title><link href="https://thib.me/pattern-lab-goes-django" rel="alternate" type="text/html" title="Pattern Lab goes Django" /><published>2020-12-11T12:52:22+00:00</published><updated>2020-12-11T12:52:22+00:00</updated><id>https://thib.me/pattern-lab-goes-django</id><content type="html" xml:base="https://thib.me/pattern-lab-goes-django">&lt;p&gt;If you’re into UI component reuse, you may have heard of &lt;a href=&quot;https://atomicdesign.bradfrost.com/&quot;&gt;Atomic Design&lt;/a&gt; and &lt;a href=&quot;https://patternlab.io/&quot;&gt;Pattern Lab&lt;/a&gt;. We’re big fans at Torchbox, but Pattern Lab is PHP or Node-based, while we decided long ago to &lt;a href=&quot;https://torchbox.com/blog/alternatives-to-drupal/&quot;&gt;leave the PHP / Drupal world behind&lt;/a&gt;, and concentrate on Django. We took Pattern Lab with us, and built &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/&quot;&gt;django-pattern-library&lt;/a&gt; – a.k.a. Pattern Lab goes Django.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;pattern-libraries-at-torchbox&quot;&gt;Pattern libraries at Torchbox&lt;/h2&gt;

&lt;p&gt;At Torchbox, pattern libraries are a way to separate concerns between front-end and back-end development. We’ve been using our Django pattern library package for a couple of years to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clarify responsibilities and separate concerns, both in code, and as members of a development team between front-end and back-end development.&lt;/li&gt;
  &lt;li&gt;As needed, enable for front-end developers to work on pages and block templates before any back-end development happens.&lt;/li&gt;
  &lt;li&gt;Encourage code reuse and components composition – defining independent UI components, reusable without markup copy-paste, and reusable on other projects like any Django app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Does this sound useful to you? Go and have a look at our introductory presentation from Wagtail Space US 2020, &lt;a href=&quot;https://www.youtube.com/watch?v=isrOufI7TKc&quot;&gt;Reusable UI components – A journey from React to Wagtail&lt;/a&gt;:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/isrOufI7TKc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Slides: &lt;a href=&quot;https://docs.google.com/presentation/d/1pZAbunn0Ci8B9NR0mS5taOPe7BMdAiDrKNIcd9xBWO4/edit&quot;&gt;Wagtail Space US 2020 - Reusable UI components – A journey from React to Wagtail&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;our-first-big-release&quot;&gt;Our first big release&lt;/h2&gt;

&lt;p&gt;Pattern Lab has been around for a while, and so has our own &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/&quot;&gt;django-pattern-library&lt;/a&gt;, but we only open-sourced it a few months ago. Sadly it wasn’t as well documented or flexible as we would have liked it to be. This is starting to change with our most recent release. Here are the headline features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchbox.github.io/django-pattern-library/getting-started/#compatibility&quot;&gt;Support for Python 3.9, Django 3.0, 3.1, and tentatively 3.2&lt;/a&gt;. We also started running the project’s tests against Django’s development branch for good measure.&lt;/li&gt;
  &lt;li&gt;A new &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/guides/automated-tests/#with-render_patterns&quot;&gt;&lt;em&gt;render_patterns&lt;/em&gt; management command&lt;/a&gt;, so you can test whether all of your project’s patterns render successfully at once. Think of it as smoke tests for pattern library components.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchbox.github.io/django-pattern-library/reference/api/#override_tag&quot;&gt;Optional default values for tag overrides&lt;/a&gt;, so you no longer have to repeat specific overrides in all of your component mocks.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchbox.github.io/django-pattern-library/reference/api/#sections&quot;&gt;Support for arbitrary template structures&lt;/a&gt; – whether that’s across multiple apps or only one, however you want your templates to be structured.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;View the full &lt;a href=&quot;https://github.com/torchbox/django-pattern-library/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt;. Along those shiny features, we also released two massive improvements to the project: a &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/&quot;&gt;new documentation website&lt;/a&gt;, with lots more content – guides, recipes, and reference info. And also a &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/demo/pattern-library/&quot;&gt;new demo site&lt;/a&gt;, so you can see for yourself how the project works (although note the public demo is &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/guides/static-site-export/&quot;&gt;exported as a static site&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;template-structures&quot;&gt;Template structures&lt;/h3&gt;

&lt;p&gt;Starting in v0.3.0, you may structure your project’s templates in however many folders you want. This feels like such an obvious need in hindsight, but the pattern library having only been an internal Torchbox project for a while, it didn’t really need to accommodate that many different structures!&lt;/p&gt;

&lt;p&gt;This is now possible thanks to the new &lt;a href=&quot;https://torchbox.github.io/django-pattern-library/reference/api/#sections&quot;&gt;SECTIONS&lt;/a&gt; setting, with the previous predefined structure kept as the default for backwards compatibility. It also comes with a lot of black magic to decide which templates are partials and should be rendered in a base template, and which can be rendered as-is.&lt;/p&gt;

&lt;h3 id=&quot;render_patterns&quot;&gt;render_patterns&lt;/h3&gt;

&lt;p&gt;This new management command might or might not be relevant to you but it’s worth highlighting use cases this is intended to support:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchbox.github.io/django-pattern-library/guides/static-site-export/&quot;&gt;Static exports of the pattern library&lt;/a&gt;, for those cases where you want a simple way to share patterns publicly or host them alongside documentation, rather than alongside your site.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchbox.github.io/django-pattern-library/guides/automated-tests/&quot;&gt;Automated tests of UI components&lt;/a&gt;, particularly in continuous integration, where it might be problematic for you to get a Django server up and running depending on the project’s dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combined with tools like &lt;a href=&quot;https://pa11y.org/&quot;&gt;Pa11y and pa11y-ci&lt;/a&gt;, this makes it much simpler to run site-wide automated accessibility tests for all of your project’s templates, making the most of the pattern library’s tightly controlled mock data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/pattern-lab-goes-django/gitlab-ci-pa11y-patterns.png&quot; alt=&quot;Screenshot of pa11y-ci output in GitLab CI showing reported issues on pattern library templates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are still rough edges (for example the command will abort the whole test suite if only a single template fails to render!), but we hope you’ll find uses for this nonetheless.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next&lt;/h2&gt;

&lt;p&gt;Hopefully more of the above – new features, more stability, better documentation. We’re particulary keen on &lt;a href=&quot;https://github.com/torchbox/django-pattern-library/issues/106&quot;&gt;finding ways to mock templates with factories rather than plain data structures&lt;/a&gt;, and &lt;a href=&quot;https://github.com/torchbox/django-pattern-library/issues/103&quot;&gt;combining our Django rendering features with Storybook’s developer experience&lt;/a&gt;.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">If you’re into UI component reuse, you may have heard of Atomic Design and Pattern Lab. We’re big fans at Torchbox, but Pattern Lab is PHP or Node-based, while we decided long ago to leave the PHP / Drupal world behind, and concentrate on Django. We took Pattern Lab with us, and built django-pattern-library – a.k.a. Pattern Lab goes Django.</summary></entry><entry><title type="html">Detecting Wagtail in the wild</title><link href="https://thib.me/detecting-wagtail-in-the-wild" rel="alternate" type="text/html" title="Detecting Wagtail in the wild" /><published>2020-11-18T15:15:22+00:00</published><updated>2020-11-18T15:15:22+00:00</updated><id>https://thib.me/detecting-wagtail-in-the-wild</id><content type="html" xml:base="https://thib.me/detecting-wagtail-in-the-wild">&lt;p&gt;How can you tell if a site is made with Wagtail or not? There are more ways than people might think at first sight, and after a few years of toying with the idea I finally put together a way to detect Wagtail sites, that strikes a good balance between reliability and convenience. Let’s go birdwatching.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;ways-to-detect-wagtail&quot;&gt;Ways to detect Wagtail&lt;/h2&gt;

&lt;p&gt;I could think of a few &lt;a href=&quot;https://github.com/springload/madewithwagtail/issues/62&quot;&gt;when I first started thinking of this problem&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Determine if the site is &lt;a href=&quot;https://stackoverflow.com/questions/721934/how-can-you-tell-if-a-site-has-been-made-with-django&quot;&gt;built with Django&lt;/a&gt;. That’s a start&lt;/li&gt;
  &lt;li&gt;Check if the site uses a &lt;a href=&quot;https://wagtail.io/wagtail-badges/&quot;&gt;Wagtail badge&lt;/a&gt;. Cute, but not used much in practice.&lt;/li&gt;
  &lt;li&gt;Load &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/admin/login&lt;/code&gt; and check for “wagtail” in the response – that would surely be an almost certain match.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem with a lot of those approaches is their relance on crawling the site, which is quite invasive, not very reliable, and can be time-consuming across a lot of sites. It’s also unclear how common those cues would be across the breadth of Wagtail sites out there.&lt;/p&gt;

&lt;p&gt;The ideal approach would be HTTP response headers – which could be obtained from any page with a lightweight HEAD request. Wagtail unfortunately doesn’t have any custom header, so the next best thing is to inspect the pages’ markup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wagtail’s (legacy) rich text uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rich-text&lt;/code&gt; class to wrap the HTML of rich text fields&lt;/li&gt;
  &lt;li&gt;Rich text images use hard-coded classes like &lt;a href=&quot;https://github.com/wagtail/wagtail/blob/bb2e460c0b92fba802fc3f369730004d6b648e64/wagtail/images/formats.py#L91-L94&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;richtext-image full-width&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wagtail’s documents are served from a &lt;a href=&quot;https://github.com/wagtail/wagtail/blob/bb2e460c0b92fba802fc3f369730004d6b648e64/wagtail/documents/urls.py#L6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/documents/&lt;/code&gt;&lt;/a&gt; sub-path.&lt;/li&gt;
  &lt;li&gt;And last but not least, &lt;a href=&quot;https://docs.wagtail.io/en/stable/topics/images.html?highlight=renditions#generating-image-renditions-in-python&quot;&gt;image renditions&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Image renditions are very common on Wagtail sites. The detection would only work for pages that have user-uploaded images, but lucky for us a site’s homepage tends to be the type of high-value page where there are CMS-managed images. Here are a few examples of URLs from renditions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;https://www.jazzfestival.nz/media/images/video-fallback-image_1.width-1920.png

/media/images/bevi_3_mob.original.format-png.png

/media/original_images/Social_Distancing_Dashboard_-_image_1_TU_DelftAMS_Institute.png

https://buckup-ff-stories.s3.amazonaws.com/original_images/Lockup_Logo_-_JPEG-1.png

/media/images/UE4LowPolyVehicleTh.2e16d0ba.fill-960x540-c0.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The distinctive features are the folders – always either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;original_images&lt;/code&gt;, and frequently either placed directly at the root of a site, or from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/media&lt;/code&gt; subfolder at the root, or a single level up. And then the fact that all of the site’s images are placed in those two folders without any additional sub-folders, with file name suffixes following a set format for all files under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;images/&lt;/code&gt; like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.width-1920&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fill-960x450-c0&lt;/code&gt; above. I came up with the particular regex used here after trying out different variations on 800’000 homepages from the &lt;a href=&quot;https://majestic.com/reports/majestic-million&quot;&gt;Majestic Million&lt;/a&gt; list of domains.&lt;/p&gt;

&lt;h2 id=&quot;the-regex&quot;&gt;The regex&lt;/h2&gt;

&lt;p&gt;Here is a simplified diagram of the logic (created with &lt;a href=&quot;https://regexper.com/#%5C%2F%28original_images%5C%2F%5B%5Cw-%5D%2B%5C.%7Cimages%5C%2F%5B%5Cw-.%5D%2B%5C.%28%28fill%7Cmax%7Cmin%7Cwidth%7Cheight%7Cscale%29-%5Cd%7Coriginal%29%29&quot;&gt;regexper&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/detecting-wagtail-in-the-wild/regexper-diagram.svg&quot; alt=&quot;regexper train diagram of Wagtail regular expressions&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-world-usage&quot;&gt;Real-world usage&lt;/h2&gt;

&lt;p&gt;The regex could be more complex and precise but this wouldn’t actually change much to its real-world usefulness, so I gradually simplified it to the above. With this in place, we can then create different ways to run this detection on arbitrary websites:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An online website, &lt;a href=&quot;https://detect-wagtail.netlify.app/&quot;&gt;detect-wagtail.netlify.app&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A bookmarket, also available from &lt;a href=&quot;https://detect-wagtail.netlify.app/&quot;&gt;detect-wagtail.netlify.app&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A browser extension thanks to &lt;a href=&quot;https://github.com/AliasIO/wappalyzer&quot;&gt;Wappalyzer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A Node CLI, also thanks to &lt;a href=&quot;https://github.com/AliasIO/wappalyzer&quot;&gt;Wappalyzer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;As an npm package for more custom needs, &lt;a href=&quot;https://www.npmjs.com/package/detect-wagtail&quot;&gt;detect-wagtail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With Wappalyzer in particular, they also offer additional services based on anonymous data reporting from their detection tools. Here is their page that aggregates Wagtail usage data: &lt;a href=&quot;https://www.wappalyzer.com/technologies/cms/wagtail/&quot;&gt;Websites using Wagtail&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re unsure which of these to use – the Wappalyzer checks are the strictest, so best used if you don’t want to manually confirm the results by inspecting the pages’ HTML.&lt;/p&gt;

&lt;h2 id=&quot;real-world-data&quot;&gt;Real-world data&lt;/h2&gt;

&lt;p&gt;With this regex in place, I tried it out on a few lists of websites. See &lt;a href=&quot;https://github.com/thibaudcolas/detect-wagtail/tree/main/docs/analysis&quot;&gt;detect-wagtail/docs/analysis&lt;/a&gt; for the full details.&lt;/p&gt;

&lt;h3 id=&quot;eu-public-sector-websites&quot;&gt;EU public sector websites&lt;/h3&gt;

&lt;p&gt;Dataset from &lt;a href=&quot;https://www.funka.com/en/projekt/we4authors/&quot;&gt;We4authors&lt;/a&gt;. Based on this analysis, I could find 3 national EU public sector websites built with Wagtail:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;www.danepubliczne.gov.pl
www.nhs.uk
www.nesta.org.uk
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many more public sector websites built with Wagtail at the national and regional / local level, but this type of analysis already shows the value in having the ability to detect Wagtail – the CMS could be part of &lt;a href=&quot;https://www.funka.com/en/projekt/we4authors/we4authors-main-activities-and-results/market-analysis-and-benchmarking-process-of-existing-cms/&quot;&gt;market analysis&lt;/a&gt; for research projects like We4authors, from which we can learn a lot.&lt;/p&gt;

&lt;h3 id=&quot;us-federal-websites&quot;&gt;US federal websites&lt;/h3&gt;

&lt;p&gt;Analysis of the US federal websites from the &lt;a href=&quot;https://github.com/GSA/digitalgov.gov/blob/main/content/resources/content-management-systems-used-by-government-agencies.md&quot;&gt;digital.gov list&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;fec.gov
www.peacecorps.gov
www.consumerfinance.gov
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;made-with-wagtail&quot;&gt;Made with Wagtail&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://madewithwagtail.org/&quot;&gt;Made with Wagtail&lt;/a&gt; is a showcase of a lot of Wagtail sites and apps. About two thirds of sites listed are detected with the following regular expressions.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ag &lt;span class=&quot;s1&quot;&gt;&apos;\/(original_images\/[\w-]+\.|images\/[\w-.]+\.((fill|max|min|width|height|scale)-\d|original))&apos;&lt;/span&gt; mww &lt;span class=&quot;nt&quot;&gt;--stats-only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 382 files contained matches&lt;/span&gt;
ag &lt;span class=&quot;s1&quot;&gt;&apos;\/media\/(original_images\/[\w-]+\.|images\/[\w-.]+\.((fill|max|min)-\d+x\d+(-c\d+)?|(width|height|scale)-\d+|original)\.)&apos;&lt;/span&gt; mww &lt;span class=&quot;nt&quot;&gt;--stats-only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 292 files contained matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The remaining third are largely made up of sites that… actually aren’t made with Wagtail, either because Wagtail is only used for a specific section of a site (and not the homepage), or because the site got rebuilt with another technology since being listed there.&lt;/p&gt;

&lt;h3 id=&quot;majestic-million&quot;&gt;Majestic Million&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://majestic.com/reports/majestic-million&quot;&gt;Majestic Million&lt;/a&gt; is a dataset of 1M domain names ordered by popularity. We can also use the above methodology to assess how many websites are made with Wagtail on this list (about 0.05%).&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ag &lt;span class=&quot;s1&quot;&gt;&apos;\/media\/(original_images\/[\w-]+\.|images\/[\w-.]+\.((fill|max|min)-\d+x\d+(-c\d+)?|(width|height|scale)-\d+|original)\.)&apos;&lt;/span&gt; million &lt;span class=&quot;nt&quot;&gt;--stats-only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 296 files contained matches&lt;/span&gt;
ag &lt;span class=&quot;s1&quot;&gt;&apos;\/(original_images\/[\w-]+\.|images\/[\w-.]+\.((fill|max|min|width|height|scale)-\d|original))&apos;&lt;/span&gt; ../detect-wagtail-data/million &lt;span class=&quot;nt&quot;&gt;--stats-only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 528 files contained matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Those numbers neatly match those of &lt;a href=&quot;https://whatcms.org/c/Wagtail&quot;&gt;WhatCMS&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;security-implications&quot;&gt;Security implications&lt;/h2&gt;

&lt;p&gt;Telling whether a given site is built with Wagtail or not really doesn’t take that much effort. The image renditions methodology also shows it’s very easy to do at scale. There is nothing here that can prevent bad actors from scanning the web for vulnerable Wagtail sites, as is commonplace for other platforms. For all intents and purposes, you should assume this is happening already.&lt;/p&gt;

&lt;p&gt;What should we do then? For a start, don’t rely on &lt;a href=&quot;https://en.wikipedia.org/wiki/Security_through_obscurity&quot;&gt;security through obscurity&lt;/a&gt;. Take the time to establish a threat model for your site, and protect it accordingly by restricting access to anything exploitable, and implementing brute force protections where relevant. Take a multi-layered approach to security – with defenses at the network level (e.g. a WAF), application level (e.g. rate limiting, defensive programming, handling of untrusted input, etc.), and also monitoring (logs analysis).&lt;/p&gt;

&lt;p&gt;An old but still relevant example of this in the Wagtail world is &lt;a href=&quot;https://github.com/springload/wagtailenforcer&quot;&gt;WagtailEnforcer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And of course, keep your site up-to-date with security fixes for all its dependencies. While the approach described here doesn’t make it possible to determine which version of Wagtail is used – there are other very viable approaches that make this equally as easy (see &lt;a href=&quot;https://github.com/caioariede/detect-django-version&quot;&gt;detect-django-version&lt;/a&gt; for inspiration).&lt;/p&gt;

&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;

&lt;p&gt;There are a lot more applications to being able to detect Wagtail websites than just knowing how many there are out there. &lt;a href=&quot;WhatCMS.org&quot;&gt;WhatCMS.org&lt;/a&gt; has had some amount of Wagtail data for years and is a good example of the potential for market analysis. For me, I’m more interested in seeing how Wagtail is used in the wild. Here are interesting questions this can help answer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wagtail headless usage – which static site generators are the most common with Wagtail, that would be worth documenting the usage of better. In my analysis, I found a lot of Next and Gatsby websites in particular.&lt;/li&gt;
  &lt;li&gt;Security best practices – how many websites have the Wagtail admin accessible from any IP vs being restricted.&lt;/li&gt;
  &lt;li&gt;Accessibility – how accessible Wagtail sites are.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This last point is the one I’m the most interested in – in particular, comparing Wagtail’s results to those of other technologies in the &lt;a href=&quot;https://webaim.org/projects/million/&quot;&gt;WebAIM Million&lt;/a&gt;. We’ll see how that goes!&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">How can you tell if a site is made with Wagtail or not? There are more ways than people might think at first sight, and after a few years of toying with the idea I finally put together a way to detect Wagtail sites, that strikes a good balance between reliability and convenience. Let’s go birdwatching.</summary></entry><entry><title type="html">Accessibility wins for Django projects</title><link href="https://thib.me/accessibility-wins-for-django-projects" rel="alternate" type="text/html" title="Accessibility wins for Django projects" /><published>2020-09-15T22:15:22+00:00</published><updated>2020-09-15T22:15:22+00:00</updated><id>https://thib.me/accessibility-wins-for-django-projects</id><content type="html" xml:base="https://thib.me/accessibility-wins-for-django-projects">&lt;p&gt;Talk at DjangoCon EU 2020&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.google.com/presentation/d/1JWroGeYl7JlP2OHbG4a4h0SxSlMsWJvRTvDm0kFkqhQ/edit&quot;&gt;Google Slides: DjangoCon EU 2020 - Accessibility wins for Django projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/12tedghT8bRGhnZgWt7tXWv_qtvJ1YKCA/view?usp=sharing&quot;&gt;PDF: DjangoCon EU 2020 - Accessibility wins for Django projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Talk at DjangoCon EU 2020</summary></entry><entry><title type="html">Testing accessibility in Continuous Integration with Pa11y and beyond</title><link href="https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond" rel="alternate" type="text/html" title="Testing accessibility in Continuous Integration with Pa11y and beyond" /><published>2020-08-13T21:21:08+00:00</published><updated>2020-08-13T21:21:08+00:00</updated><id>https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond</id><content type="html" xml:base="https://thib.me/testing-accessibility-in-ci-with-pa11y-and-beyond">&lt;p&gt;Here are tools I recommend to test for accessibility issues in continuous integration, where automation is the only option, and reliability is paramount.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;the-requirements-of-ci&quot;&gt;The requirements of CI&lt;/h2&gt;

&lt;p&gt;It’s worth pointing out early – no accessibility testing tool can &lt;a href=&quot;https://alphagov.github.io/accessibility-tool-audit/&quot;&gt;find all issues&lt;/a&gt; . With this in mind, in CI, we need to focus on tools that find as much as possible… but don’t create false positives, which are very damaging when they fail your build. It’s more important for a tool to have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Precision_and_recall&quot;&gt;high precision, than a high recall&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static analysis&lt;/h2&gt;

&lt;p&gt;This is always a valuable first line of defense.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Basic checks for stylesheets: &lt;a href=&quot;https://github.com/YozhikM/stylelint-a11y&quot;&gt;stylelint-a11y&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Relatively advanced checks for React code: &lt;a href=&quot;https://github.com/yannickcr/eslint-plugin-react&quot;&gt;eslint-plugin-react&lt;/a&gt;, &lt;a href=&quot;https://github.com/evcohen/eslint-plugin-jsx-a11y&quot;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;And a Vue equivalent: &lt;a href=&quot;https://github.com/maranran/eslint-plugin-vue-a11y&quot;&gt;eslint-plugin-vue-a11y&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For HTML templates, you can try my own experimental HTML templates linter, &lt;a href=&quot;https://github.com/thibaudcolas/curlylint&quot;&gt;Curlylint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;accessibility-tests-in-unit-and-integration-tests&quot;&gt;Accessibility tests in unit and integration tests&lt;/h2&gt;

&lt;p&gt;Here are the options, from simplest to most complex:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nickcolley/jest-axe&quot;&gt;jest-axe&lt;/a&gt; in jsdom for React projects. It’s very lightweight to set up, and gives surprisingly good results.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nickcolley/jest-axe&quot;&gt;jest-axe&lt;/a&gt; in Puppeteer. It’s not lightweight to set up, far from it, but does a bit more.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pa11y.org/&quot;&gt;Pa11y&lt;/a&gt;, or &lt;a href=&quot;https://github.com/pa11y/pa11y-ci&quot;&gt;pa11y-ci&lt;/a&gt;. Not lightweight either, but simple to configure.&lt;/li&gt;
  &lt;li&gt;Google’s Lighthouse also has a &lt;a href=&quot;https://github.com/GoogleChrome/lighthouse-ci&quot;&gt;Lighthouse CI&lt;/a&gt; variant which may be useful when also wanting to have performance and best practice checks.&lt;/li&gt;
  &lt;li&gt;An alternative could also be to run HTML validation with &lt;a href=&quot;https://validator.github.io/validator/&quot;&gt;V.Nu HTML5 validator&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-to-test&quot;&gt;What to test&lt;/h2&gt;

&lt;p&gt;It’s not always easy to have test content to run the checks against of in CI. My personal preference is to run the tests against a pattern library’s components, for example &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt; or &lt;a href=&quot;https://github.com/torchbox/django-pattern-library&quot;&gt;django-pattern-library&lt;/a&gt;. As part of creating the components, we naturally create test data for them similarly to unit tests (TDD or not) – this test content can then be used to test the components’ variations for accessibility issues.&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">Here are tools I recommend to test for accessibility issues in continuous integration, where automation is the only option, and reliability is paramount.</summary></entry><entry><title type="html">Reusable UI components – A journey from React to Wagtail</title><link href="https://thib.me/reusable-ui-components-journey-from-react-to-wagtail" rel="alternate" type="text/html" title="Reusable UI components – A journey from React to Wagtail" /><published>2020-07-31T01:15:22+00:00</published><updated>2020-07-31T01:15:22+00:00</updated><id>https://thib.me/reusable-ui-components-journey-from-react-to-wagtail</id><content type="html" xml:base="https://thib.me/reusable-ui-components-journey-from-react-to-wagtail">&lt;p&gt;This is Ben Dickinson and I’s joint &lt;a href=&quot;https://us.wagtail.space/&quot;&gt;Wagtail Space US 2020&lt;/a&gt; talk about pattern libraries at Torchbox, introducing &lt;a href=&quot;https://github.com/torchbox/django-pattern-library&quot;&gt;django-pattern-library&lt;/a&gt;.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/isrOufI7TKc&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Slides: &lt;a href=&quot;https://docs.google.com/presentation/d/1pZAbunn0Ci8B9NR0mS5taOPe7BMdAiDrKNIcd9xBWO4/edit&quot;&gt;Wagtail Space US 2020 - Reusable UI components – A journey from React to Wagtail&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;pattern-libraries-as-a-methodology&quot;&gt;Pattern libraries as a methodology&lt;/h2&gt;

&lt;h3 id=&quot;atomic-design&quot;&gt;Atomic Design&lt;/h3&gt;

&lt;h3 id=&quot;pattern-lab&quot;&gt;Pattern Lab&lt;/h3&gt;

&lt;h2 id=&quot;react&quot;&gt;React&lt;/h2&gt;

&lt;h3 id=&quot;a-paradigm-shift&quot;&gt;A paradigm shift&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Component-driven UIs&lt;/li&gt;
  &lt;li&gt;Functional programming for UIs&lt;/li&gt;
  &lt;li&gt;Not a template language&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-makes-react-good-in-practice&quot;&gt;What makes React good in practice&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Nice developer experience&lt;/li&gt;
  &lt;li&gt;Reusable components&lt;/li&gt;
  &lt;li&gt;Maintainable, testable code&lt;/li&gt;
  &lt;li&gt;Component-driven development with Storybook&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pattern-libraries-at-torchbox&quot;&gt;Pattern libraries at Torchbox&lt;/h3&gt;

&lt;p&gt;The codified interface between front-end and back-end work&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Clarifies responsibilities, separates concerns, both in code, and as members of a development team&lt;/li&gt;
  &lt;li&gt;If needed, makes it possible for front-end developers to work on pages and block templates before the models are done&lt;/li&gt;
  &lt;li&gt;Encourages code reuse – defining independent UI components, easy to port to other projects&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;current-trends-design-systems&quot;&gt;Current trends: design systems&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://designsystem.digital.gov/&quot;&gt;USWDS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://design-system.service.gov.uk/&quot;&gt;GOV.UK Design System&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://luna.sainsburys.co.uk/&quot;&gt;Sainsbury’s Luna&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://decanter.stanford.edu/&quot;&gt;Stanford’s Decanter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;why-develop-another-pattern-library-tool&quot;&gt;Why develop another pattern library tool?&lt;/h2&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Most of our projects are not API-driven React SPAs - they’re vanilla Django/Wagtail&lt;/li&gt;
  &lt;li&gt;Django has a proprietary template language&lt;/li&gt;
  &lt;li&gt;Translating non-Django templates from a pattern library is time-consuming and error-prone&lt;/li&gt;
  &lt;li&gt;Duplicating templates is a maintenance burden and often leads to divergence&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-challenges&quot;&gt;More challenges!&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Template tags are great, but are discouraged by using a pattern library that doesn’t support them&lt;/li&gt;
  &lt;li&gt;Tags often depend on the database (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include_block foo&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Visual testing requires time-consuming manual setup&lt;/li&gt;
  &lt;li&gt;Django’s native testing tools are inadequate for visual testing - especially cross-browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pattern-lab-goes-django&quot;&gt;Pattern Lab goes Django!&lt;/h3&gt;

&lt;p&gt;pip install django-pattern-library&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Component playground for Django template partials&lt;/li&gt;
  &lt;li&gt;Mock template context from YAML files&lt;/li&gt;
  &lt;li&gt;Template documentation in markdown&lt;/li&gt;
  &lt;li&gt;Mock out template tags (both built-in and user-defined tags)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;No duplication of templates - the pattern library uses the real templates&lt;/li&gt;
  &lt;li&gt;All components can be viewed in one place&lt;/li&gt;
  &lt;li&gt;Easier visual testing&lt;/li&gt;
  &lt;li&gt;No need for content in the DB&lt;/li&gt;
  &lt;li&gt;Front-end development can happen before the models are ready&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;known-issues&quot;&gt;Known issues&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Documentation is good but could be much better&lt;/li&gt;
  &lt;li&gt;Context merging is fragile and requires some repetition in YAML files&lt;/li&gt;
  &lt;li&gt;Template tag mocking is not flexible enough&lt;/li&gt;
  &lt;li&gt;No support for mocking filters yet&lt;/li&gt;
  &lt;li&gt;Richer objects are fiddly to mock (e.g. ``)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demo-time&quot;&gt;Demo time!&lt;/h2&gt;

&lt;h3 id=&quot;first-demo&quot;&gt;First demo&lt;/h3&gt;

&lt;h3 id=&quot;second-demo&quot;&gt;Second demo&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://storybook-django.herokuapp.com/?path=/docs/django-patterns-streamfield-quote-block--default&quot;&gt;storybook-django&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;takeaways-&quot;&gt;Takeaways 🌈&lt;/h2&gt;

&lt;h3 id=&quot;why-we-recommend-this-approach&quot;&gt;Why we recommend this approach&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;As a methodology: speeds up the process for medium to large sites&lt;/li&gt;
  &lt;li&gt;Reusable components: Encourages code reuse and UI consistency across the site&lt;/li&gt;
  &lt;li&gt;Testing opportunities: Manual “unit tests” for UI components, &amp;amp; opportunities for automated visual regression / E2E / accessibility tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ready-to-use&quot;&gt;Ready to use&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Used for all production Wagtail sites at Torchbox: &lt;a href=&quot;https://github.com/torchbox/django-pattern-library&quot;&gt;django-pattern-library&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Experimental, used on two projects, feedback welcome: &lt;a href=&quot;https://github.com/torchbox/storybook-django&quot;&gt;storybook-django&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For all our React projects: &lt;a href=&quot;https://storybook.js.org/&quot;&gt;Storybook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ready-for-contributions-&quot;&gt;Ready for contributions 😬&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Open-sourced &lt;a href=&quot;https://github.com/torchbox/django-pattern-library&quot;&gt;django-pattern-library&lt;/a&gt; a few months ago&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/torchbox/storybook-django&quot;&gt;storybook-django&lt;/a&gt; still very experimental&lt;/li&gt;
  &lt;li&gt;Feedback welcome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Backlog for the next three months: &lt;a href=&quot;https://github.com/torchbox/django-pattern-library/projects/3&quot;&gt;github.com/torchbox/django-pattern-library/projects/3&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you to Dan, Tom, William, Nick for helping us rehearse!&lt;/p&gt;</content><author><name>Thibaud Colas</name></author><summary type="html">This is Ben Dickinson and I’s joint Wagtail Space US 2020 talk about pattern libraries at Torchbox, introducing django-pattern-library.</summary></entry></feed>